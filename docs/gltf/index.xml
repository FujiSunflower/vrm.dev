<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – glTF</title><link>https://vrm.dev/docs/gltf/</link><description>Recent content in glTF on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 07 Oct 2021 21:04:07 +0900</lastBuildDate><atom:link href="https://vrm.dev/docs/gltf/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Glbインポート</title><link>https://vrm.dev/docs/gltf/glb_import/</link><pubDate>Mon, 12 Oct 2020 17:04:00 +0900</pubDate><guid>https://vrm.dev/docs/gltf/glb_import/</guid><description>
&lt;h1 id="import">import&lt;/h1>
&lt;p>glb ファイルを Unity の Assets 下のフォルダに投入すると、glb を Asset 化できます。&lt;/p>
&lt;h2 id="import-option">import option&lt;/h2>
&lt;h3 id="reverseaxis-反転軸の設定">&lt;code>ReverseAxis&lt;/code> 反転軸の設定&lt;/h3>
&lt;p>glTFの右手系Y-UP から Unityの左手系Y-UP に変換するときに反転する軸を選択できます。&lt;/p>
&lt;ul>
&lt;li>Z軸 (v0.68.0 より前と同じ)&lt;/li>
&lt;li>X軸 (v0.68.0 から追加)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_axis.gif" width="400" />
&lt;p>選択して &lt;code>Apply&lt;/code> を押すと反映されます。&lt;/p>
&lt;h2 id="glb-の-extract">glb の extract&lt;/h2>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&lt;/a>&lt;/p>
&lt;h3 id="clear">clear&lt;/h3>
&lt;p>初期状態(clear)では、関連する Asset (Mesh, Material, Texture, AnimationClip)は SubAsset として配下にあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>texture_1.metallicRoughness&lt;/code> は、&lt;code>texture_1&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。md&amp;rdquo; &amp;gt;}})&lt;/li>
&lt;li>&lt;code>texture_3.occlusion&lt;/code> は、 &lt;code>textrue_3&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_4.normal&lt;/code> は、 &lt;code>textrue_4&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_clear.jpg" width="400" />
&lt;h3 id="extract">extract&lt;/h3>
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すと下記のように変化します。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code> の生成&lt;/li>
&lt;li>&lt;code>texture_0.jpg&lt;/code> の生成(color)&lt;/li>
&lt;li>&lt;code>texture_1.metallicRoughness.png&lt;/code> の生成。&lt;code>texture_1&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_2.jpg&lt;/code> の生成(emission)&lt;/li>
&lt;li>&lt;code>texture_3.occlusion.png&lt;/code> の生成。&lt;code>textrue_3&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>texture_4.jpg&lt;/code> の生成(normalMap)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_extract.jpg" width="400" />
&lt;h2 id="gltf-の-extract">gltf の extract&lt;/h2>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&lt;/a>&lt;/p>
&lt;h3 id="clear-1">clear&lt;/h3>
&lt;p>初期状態(clear)では、関連する Asset (Mesh, Material, Texture(変換が必要なもの), AnimationClip)は SubAsset として配下にあります。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Default_AO.occlusion&lt;/code> は、 &lt;code>Default_AO&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>Defualt_metalRoughness.metallicRoughness&lt;/code> は、&lt;code>Defualt_metalRoughness&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_clear.jpg" width="400" />
&lt;h3 id="extract-1">extract&lt;/h3>
&lt;p>&lt;code>Extract Materials and Textures ...&lt;/code> を押すと下記のように変化します。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code> の生成&lt;/li>
&lt;li>&lt;code>Default_AO.occlusion.png&lt;/code> の生成。&lt;code>Default_AO&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;li>&lt;code>Default_metalRoughness.metallicRoughness.png&lt;/code> の生成。&lt;code>Default_metalRoughness&lt;/code> を元に Unity の Standard Shader 向けに変換したものです。&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_extract.jpg" width="400" />
&lt;h2 id="assetfile-の作られ方">AssetFile の作られ方&lt;/h2>
&lt;h3 id="以前の動作独立したasset">以前の動作(独立したasset)&lt;/h3>
&lt;p>VRM0 とv0.67以前のGLB/GLTF の Importerは、以下のように import されます。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">vrm0 の import&lt;/h4>
&lt;p>&lt;img src="https://vrm.dev/images/vrm10/vrm0_import.jpg" width="300" />&lt;/p>
&lt;ul>
&lt;li>mesh や texture や material や blendshape などの関連アセットファイルが作成されます。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h3 id="新しい動作subasset">新しい動作(subasset)&lt;/h3>
&lt;p>VRM1 とv0.68以降のGLB/GLTF の Importerは、以下のように import されます。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">vrm1 の import&lt;/h4>
&lt;p>&lt;img src="https://vrm.dev/images/vrm10/vrm1_import.jpg" width="300" />&lt;/p>
&lt;ul>
&lt;li>mesh や material や texture や Expression が SubAsset として作成されます。&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">glb の import&lt;/h4>
&lt;p>&lt;img src="https://vrm.dev/images/gltf/glb_extract_before.jpg" width="600" />&lt;/p>
&lt;ul>
&lt;li>material と texture が SubAsset として作成されます&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="subasset-を変更するには-extract-する">SubAsset を変更するには Extract する&lt;/h2>
&lt;p>新しい Importer で作られた SubAsset は 内容を変更ができません。&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">subasset&lt;/h4>
&lt;p>SubAsset は VRM 内のリソースを表しているためで、
例えば Material を変更しても、その変更を即座に VRM に反映することができないためです。&lt;/p>
&lt;p>FBX の Importer も同様の動作です。&lt;/p>
&lt;/div>
&lt;p>VRM1 とv0.68以降のGLB/GLTF では、Material タブなどで extract ができます。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm10/extract_material.jpg" width="300" />
&lt;img src="https://vrm.dev/images/vrm10/extract_vrm_empty.jpg" width="300" />
&lt;img src="https://vrm.dev/images/vrm10/extract_vrm.jpg" width="300" />
&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">fbx の extract&lt;/h4>
&lt;p>fbx importer の material タブには下記のようなボタンがあります。&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm10/fbx_extract.jpg" />&lt;/p>
&lt;p>&lt;code>Export Textures...&lt;/code> や &lt;code>Export Materials...&lt;/code> すると fbx の中の material を 外にコピーして独立した Asset とすることができます。
このコピーされた Asset は自由に変更することができます。&lt;/p>
&lt;/div>
&lt;h2 id="外部の-asset-と-vrm-を関連付ける-remap">外部の Asset と VRM を関連付ける Remap&lt;/h2>
&lt;p>初期状態では vrm 内部の Asset が使用されますが、これを外部の Asset と置き換えることができます。
置き換えの関連付けを管理するのが Remap です。&lt;/p>
&lt;ul>
&lt;li>None になっているときは、 &lt;code>vrm&lt;/code>, &lt;code>glb&lt;/code> に内部の SubAsset を使用しているという意味になります。&lt;/li>
&lt;li>Extract以外にも、個別に既存のAssetを割り当てできます&lt;/li>
&lt;/ul>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">extract 後&lt;/h4>
&lt;p>&lt;img src="https://vrm.dev/images/vrm10/remap_materials.jpg" width="300" />&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/gltf/glb_extract_after.jpg" width="700" />&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/gltf/vrm1_extract_after.jpg" width="700" />&lt;/p>
&lt;p>SubAsset が書き出され、それが Remap に代入されます。&lt;/p>
&lt;/div></description></item><item><title>Docs: Glbエクスポート</title><link>https://vrm.dev/docs/gltf/glb_export/</link><pubDate>Thu, 07 Oct 2021 20:43:28 +0900</pubDate><guid>https://vrm.dev/docs/gltf/glb_export/</guid><description>
&lt;p>&lt;code>v0.68.0&lt;/code> 以降&lt;/p>
&lt;p>UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p>
&lt;h3 id="1-unigltfexport-unigltf-2xy-メニューからダイアログを開きます">1. &lt;code>UniGLTF/Export UniGLTF-2.X.Y&lt;/code> メニューからダイアログを開きます&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/unigltf/glb_export_dialog.jpg" alt="image">&lt;/p>
&lt;h3 id="2-exportroot-に対象の-gameiobject-をセットしてください">2. &lt;code>ExportRoot&lt;/code> に対象の GameIObject をセットしてください&lt;/h3>
&lt;p>ドラッグアンドドロップや、右の◎ボタンを押すことで選択できます。&lt;/p>
&lt;ul>
&lt;li>一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/li>
&lt;/ul>
&lt;h3 id="3-export-を押す">3. &lt;code>Export&lt;/code> を押す&lt;/h3>
&lt;p>ファイル保存ダイアログが表示されるので出力先を指定してください。&lt;/p>
&lt;h2 id="glbのエクスポート対象になるコンポーネント">Glbのエクスポート対象になるコンポーネント&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li>
&lt;/ul>
&lt;h2 id="対応しているshader">対応しているShader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>&lt;/li>
&lt;li>&lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="v0680-より前">&lt;code>v0.68.0&lt;/code> より前&lt;/h1>
&lt;h2 id="手順">手順&lt;/h2>
&lt;p>UniVRMに含まれるUniGLTFでglbファイルを作成することが出来ます。
以下、手順を説明します。&lt;/p>
&lt;h3 id="1-空のシーンを用意します">1. 空のシーンを用意します。&lt;/h3>
&lt;h3 id="2-一番親になるemptyを作成します移動回転拡縮は無し">2. 一番親になるemptyを作成します。移動・回転・拡縮は無し。&lt;/h3>
&lt;p>一番親は、GLTFのノードではなくシーンとして記録しています。シーンには、移動・回転・拡縮 がありません。&lt;/p>
&lt;h3 id="3-エクスポートしたいオブジェクトをemptyの子にします">3. エクスポートしたいオブジェクトをemptyの子にします。&lt;/h3>
&lt;p>(この例ではCubeを作成しました。Prefab等任意のオブジェクトを追加できます)&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/root_cube.png" alt="image">&lt;/p>
&lt;h3 id="4-一番親のオブジェクトを選択してエクスポートメニューを起動します">4. 一番親のオブジェクトを選択して、エクスポートメニューを起動します。&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/menu_unigltf_export.png" alt="image">&lt;/p>
&lt;h3 id="5-ファイル名を選択して-glb-ファイルを書き出せば完了です">5. ファイル名を選択して &lt;code>glb&lt;/code> ファイルを書き出せば完了です。&lt;/h3>
&lt;h2 id="glbのエクスポート対象になるコンポーネント-1">Glbのエクスポート対象になるコンポーネント&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (一番親以外の子供につけてください)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (一番親のオブジェクトに付けてください。回転はQuaternionのキーフレームを打ってください。移動・回転・拡縮に対応しています。BlendShapeは未対応)&lt;/li>
&lt;/ul>
&lt;h2 id="対応しているshader-1">対応しているShader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code> もしくは &lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: アニメーション</title><link>https://vrm.dev/docs/gltf/animation_exporter/</link><pubDate>Thu, 07 Oct 2021 20:43:28 +0900</pubDate><guid>https://vrm.dev/docs/gltf/animation_exporter/</guid><description>
&lt;blockquote>
&lt;p>VRM は、Animation を使わないという仕様です&lt;/p>
&lt;/blockquote>
&lt;h3 id="対応バージョン">対応バージョン&lt;/h3>
&lt;ul>
&lt;li>v0.44&lt;/li>
&lt;/ul>
&lt;h3 id="対応状況">対応状況&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">KeyName&lt;/th>
&lt;th align="center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">TranslationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">RotationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ScaleKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">BlendShapeKey&lt;/td>
&lt;td align="center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="animatorをエクスポートする場合">Animatorをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimatorコンポーネントを追加&lt;/li>
&lt;li>AnimatorControllerを作成し、それをAnimatorのController項目に設定&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>このクリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="animationをエクスポートする場合">Animationをエクスポートする場合&lt;/h3>
&lt;ol>
&lt;li>ルートGameObjectにAnimationコンポーネントを追加&lt;/li>
&lt;li>UnityEditorのツールバーからWindow&amp;gt;AnimationでAnimationウインドウを開く&lt;/li>
&lt;li>ルートGameObjectが選択状態であることを確認してAnimationウインドウ中央に表示されているCreateボタンを押してAnimationClipを作る&lt;/li>
&lt;li>Inspectorの設定をDebugモードにしてAnimationClipのLegacyフラグをONにする&lt;br>
&lt;img src="https://vrm.dev/images/wiki/LegacyClip.png" alt="Interpolation">&lt;/li>
&lt;li>AnimationコンポーネントのAnimation項目に作成したAnimationClipを設定&lt;/li>
&lt;li>クリップに対してアニメーションキーを追加&lt;/li>
&lt;li>UniGLTF&amp;gt;Exportからglbを出力する&lt;/li>
&lt;/ol>
&lt;h3 id="注意事項">注意事項&lt;/h3>
&lt;ol>
&lt;li>RotationKeyのInterpolation設定をQuaternionかまたはEulerAngles(Quaternion)にすること&lt;br>
&lt;img src="https://vrm.dev/images/wiki/Interpolation.png" alt="Interpolation">&lt;/li>
&lt;li>Animatorの場合は設定されている全てのClipを検索して書き出しをしているが、ステートの状態などは出力されない&lt;/li>
&lt;li>Animator経由だと複数のアニメーションが書き込まれるが、UniGLTFのImporterが読み込むのは最初の１つだけ(UniGLTF-1.25時点）&lt;/li>
&lt;/ol></description></item><item><title>Docs: Emission と グロー(発光)</title><link>https://vrm.dev/docs/gltf/emission_glow/</link><pubDate>Thu, 07 Oct 2021 21:04:07 +0900</pubDate><guid>https://vrm.dev/docs/gltf/emission_glow/</guid><description>
&lt;p>&lt;code>vrm-1.0 向けの独自拡張です&lt;/code>&lt;/p>
&lt;h2 id="対象のシェーダー">対象のシェーダー&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>&lt;/li>
&lt;li>&lt;code>VRM10/MToon10&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="unity-の-posteffect-の-グロー">Unity の PostEffect の グロー&lt;/h2>
&lt;p>Emission の値が 1 を越える場合に発光させるポストエフェクトです。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/glow.jpg" width="300" />
&lt;p>1を超えて3や4にすることで強くなりますが &lt;code>glTF&lt;/code> の仕様上この値を格納することができません。&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">割り算で1におさめる&lt;/h4>
&lt;p>エクスポート時に下記の処理をして 最大値 1 に強制します。&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">Vector3 emission;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> max_value = get_max(emission); &lt;span style="color:#09f;font-style:italic">// r, g, b で最大の値を得る
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">if&lt;/span>(max_value&amp;gt;&lt;span style="color:#f60">1&lt;/span>)
{
emission = emission / max_value;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">vrm-0.x は保存できる&lt;/h4>
vrm-0.x は [0-1] 制限が無いので保存できます。
&lt;/div>
&lt;h2 id="vrmc_materials_hdr_emissivemultiplier-拡張を作成しました">VRMC_materials_hdr_emissiveMultiplier 拡張を作成しました&lt;/h2>
&lt;p>emission に1を越える値を格納するために、&lt;code>VRMC_materials_hdr_emissiveMultiplier&lt;/code> を作りました。
EmissiveFactor に対して乗算する float 値 を定義します。&lt;/p>
&lt;p>&lt;code>EmissiveFactor = EmissiveFactor * multiplier(1より大きい値)&lt;/code> となります。&lt;/p>
&lt;p>&lt;code>UniVRM-0.79&lt;/code> 以降でVRM1/GLB/GLTF でエクスポート可能です。&lt;/p>
&lt;p>MToon と PBR マテリアルで有効です。&lt;/p>
&lt;p>PostEffectを設定済みのサンプルシーンがありますので
お試しください。&lt;/p>
&lt;p>&lt;code>UniVRM10-XXX.unitypackage&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Assets\UniGLTF.Samples\LookDev\ballroom_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Assets\UniGLTF.Samples\LookDev\lilienstein_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Assets\UniGLTF.Samples\LookDev\moonless_golf_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Assets\UniGLTF.Samples\LookDev\spruit_sunrise_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/pull/1123">https://github.com/vrm-c/UniVRM/pull/1123&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="unity-アプリでロードする方法">Unity アプリでロードする方法&lt;/h2>
&lt;ul>
&lt;li>&lt;code>UniVRM-0.79&lt;/code> 以降でロードしてください&lt;/li>
&lt;li>シーンに PostEffect を設定してください
&lt;ul>
&lt;li>&lt;code>Assets/UniGLTF.Samples/LookDev/RenderingServicePostProcessingProfile.asset&lt;/code> サンプルの profile があります&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="仕様">仕様&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_materials_hdr_emissiveMultiplier-1.0_draft">https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_materials_hdr_emissiveMultiplier-1.0_draft&lt;/a>&lt;/p></description></item><item><title>Docs: Mesh Utility</title><link>https://vrm.dev/docs/gltf/mesh_utility/</link><pubDate>Wed, 21 Apr 2021 16:09:47 +0900</pubDate><guid>https://vrm.dev/docs/gltf/mesh_utility/</guid><description>
&lt;p>&lt;code>MeshUtility&lt;/code>はメッシュ処理のツールです。&lt;br>
現在利用可能な機能： &lt;code>MeshSeparator&lt;/code>、&lt;code>MeshIntegrator&lt;/code>、&lt;code>StaticMeshIntegrator&lt;/code>と&lt;code>BoneMeshEraser&lt;/code>。&lt;/p>
&lt;h2 id="使用例">使用例&lt;/h2>
&lt;p>ここでは、&lt;code>MeshSeparator&lt;/code>の使い方を紹介していきます。他の機能の使い方は大体同じです。&lt;br>
&lt;code>MeshSeparator&lt;/code>が適用されると、BlendShapeを含むメッシュは分割されます。
先ず、ヒエラルキーにモデルのGameObjectを選択します。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp1.jpg" width="200" />
&lt;hr>
&lt;p>または、GameObjectを&lt;code>TargetObject&lt;/code>フィールドにドラッグ＆ドロップします。&lt;br>
メッシュ処理のウィンドウを表示するため、メニューから&lt;code>UniGLTF&lt;/code> -&amp;gt; &lt;code>MeshUtility&lt;/code> -&amp;gt; &lt;code>MeshProcessing Wizard&lt;/code>をクリックしてください：&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_ja_exp2.jpg" width="800" />
&lt;hr>
&lt;p>&lt;code>Process&lt;/code>ボタンをクリックすると、処理したモデルのGameObjectを生成されます。このGameObjectを選択してエクスポータします（&lt;code>VRM0&lt;/code> -&amp;gt; &lt;code>Export UniVRM-0.xx&lt;/code>）。&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp3.jpg" width="300" />
&lt;hr>
&lt;p>分割されたメッシュも&lt;code>Assets&lt;/code>フォルダーに保存されます。&lt;br>
この例では、モデルのメッシュは顔と体の2つの部分に分割された。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">顔: BlendShapeを含む 　&lt;/th>
&lt;th align="center">体: BlendShapeを含まない&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_1.jpg" width="200" />
&lt;/td>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_2.jpg" width="200" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="meshseparator">MeshSeparator&lt;/h3>
&lt;p>BlendShapeを含むメッシュは分割されます。BlendShapeのサイズを削減できます。&lt;/p>
&lt;h3 id="meshintegrator">MeshIntegrator&lt;/h3>
&lt;p>Prefab GameObjectのすべてのメッシュを統合します。BlendShapeを含むメッシュは独立して統合されます。&lt;/p>
&lt;h3 id="staticmeshintegrator">StaticMeshIntegrator&lt;/h3>
&lt;p>Prefab GameObjectのすべての静的メッシュを一つに統合します。&lt;/p>
&lt;h3 id="bonemesheraser">BoneMeshEraser&lt;/h3>
&lt;p>ボーン（Erase Rootのヒエラルキー）に関連するメッシュを削除します。&lt;/p></description></item></channel></rss>