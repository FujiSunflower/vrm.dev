<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – glTF</title><link>https://vrm.dev/en/docs/gltf/</link><description>Recent content in glTF on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 03 Aug 2020 16:07:54 +0900</lastBuildDate><atom:link href="https://vrm.dev/en/docs/gltf/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: GLB Import</title><link>https://vrm.dev/en/docs/gltf/glb_import/</link><pubDate>Mon, 12 Oct 2020 15:51:08 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/glb_import/</guid><description>
&lt;h2 id="import-glb-file-in-editor-mode">Import GLB file in Editor Mode&lt;/h2>
&lt;p>The procedure is the same as &lt;a href="https://vrm.dev/en/docs/univrm/import/univrm_import/">VRM import&lt;/a>. Just drag and drop the GLB file into the &lt;strong>Assets&lt;/strong> folder.&lt;/p>
&lt;p>Starting with &lt;code>v0.68.0&lt;/code>, we use &lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet">DamagedHelmet&lt;/a> as an example to illustrate import settings.&lt;/p>
&lt;h3 id="reverseaxis-setting">&lt;code>ReverseAxis&lt;/code> Setting&lt;/h3>
&lt;p>The axis you want to reverse can be selected when transforming from glTF&amp;rsquo;s right-handed, Y-UP coordinate to Unity&amp;rsquo;s left-handed Y-UP coordinate.&lt;/p>
&lt;ul>
&lt;li>Z-axis (same as before v0.68.0)&lt;/li>
&lt;li>X-axis (added from v0.68.0)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_axis.gif" width="400" />
&lt;hr>
&lt;p>Select &lt;code>Reverse Axis&lt;/code> X or Z and click &lt;code>Apply&lt;/code> button. The result will be reflected as shown in the image above.&lt;/p>
&lt;h3 id="extract-materials-and-textures-">&lt;code>Extract Materials and Textures ...&lt;/code>&lt;/h3>
&lt;p>Same as we did in &lt;a href="https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/#fbxs-material-setup">fbx import&lt;/a>, initially material and textures will be imported into GLB.
In this state, the settings for materials/textures are unchangeable (&lt;code>Readonly&lt;/code> mode).&lt;/p>
&lt;img src="https://vrm.dev/images/unigltf/glb_material_tab.jpg" width="400" />
&lt;hr>
&lt;p>By clicking &lt;code>Extract Materials and Textures ...&lt;/code>, materials and textures are extracted as external assets (&lt;code>Material.asset&lt;/code>, &lt;code>Texture.png/jpg&lt;/code>).
In this way, the settings for materials/textures can be changed.&lt;/p>
&lt;img src="https://vrm.dev/images/unigltf/glb_material_tab_extracted.jpg" width="400" />
&lt;hr>
&lt;p>The image above shows that reference resources for materials/textures are properly assigned in &lt;code>Remapped Materials&lt;/code> and &lt;code>Remapped Textures&lt;/code> sections.
Click &lt;code>Clear&lt;/code> button to reset Material/Texture reference settings.&lt;/p>
&lt;h3 id="glb-extract">glb extract&lt;/h3>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&lt;/a>&lt;/p>
&lt;h4 id="clear">clear&lt;/h4>
&lt;p>In the initial state (clear), the related Asset (Mesh, Material, Texture, AnimationClip) are stored as SubAsset of GLB:&lt;/p>
&lt;ul>
&lt;li>&lt;code>texture_1.metallicRoughness&lt;/code> is converted from &lt;code>texture_1&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li>
&lt;li>&lt;code>texture_3.occlusion&lt;/code> is converted from &lt;code>textrue_3&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li>
&lt;li>&lt;code>texture_4.normal&lt;/code> is converted from &lt;code>textrue_4&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_clear.jpg" width="400" />
&lt;h4 id="extract">extract&lt;/h4>
&lt;p>By clicking &lt;code>Extract Materials and Textures ...&lt;/code>, materials/textures listed below will be generated:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code>&lt;/li>
&lt;li>&lt;code>texture_0.jpg&lt;/code> (color)&lt;/li>
&lt;li>&lt;code>texture_1.metallicRoughness.png&lt;/code>. Converted from &lt;code>texture_1&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader&lt;/li>
&lt;li>&lt;code>texture_2.jpg&lt;/code> (emission)&lt;/li>
&lt;li>&lt;code>texture_3.occlusion.png&lt;/code>. Converted from &lt;code>texture_3&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader&lt;/li>
&lt;li>&lt;code>texture_4.jpg&lt;/code> (normalMap)&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/glb_extract.jpg" width="400" />
&lt;h3 id="gltf-extract">gltf extract&lt;/h3>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&lt;/a>&lt;/p>
&lt;h4 id="clear-1">clear&lt;/h4>
&lt;p>In the initial state (clear), the related Asset (Mesh, Material, Texture, AnimationClip) are stored as SubAsset:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Default_AO.occlusion&lt;/code> is converted from &lt;code>Default_AO&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li>
&lt;li>&lt;code>Defualt_metalRoughness.metallicRoughness&lt;/code> is converted from &lt;code>Defualt_metalRoughness&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_clear.jpg" width="400" />
&lt;h4 id="extract-1">extract&lt;/h4>
&lt;p>By clicking &lt;code>Extract Materials and Textures ...&lt;/code>, materials/textures listed below will be generated:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Material_MR.mat&lt;/code>&lt;/li>
&lt;li>&lt;code>Default_AO.occlusion.png&lt;/code>. Converted from &lt;code>Default_AO&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader&lt;/li>
&lt;li>&lt;code>Default_metalRoughness.metallicRoughness.png&lt;/code>. Converted from &lt;code>Default_metalRoughness&lt;/code> to be used in Unity&amp;rsquo;s Standard Shader&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/unigltf/gltf_extract.jpg" width="400" /></description></item><item><title>Docs: GLB Export</title><link>https://vrm.dev/en/docs/gltf/glb_export/</link><pubDate>Mon, 03 Aug 2020 16:07:54 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/glb_export/</guid><description>
&lt;p>Starting with &lt;code>v0.68.0&lt;/code>, the &lt;code>glb&lt;/code> file can be create with &lt;code>UniGLTF&lt;/code> module.&lt;/p>
&lt;p>The procedure for creating a glb file is described as follows:&lt;/p>
&lt;h3 id="1-open-unigltfexport-unigltf-2xy">1. Open &lt;code>UniGLTF/Export UniGLTF-2.X.Y&lt;/code>&lt;/h3>
&lt;p>At the top of Unity Editor, click &lt;code>UniGLTF&lt;/code> -&amp;gt; &lt;code>UniGLTF-2.X.Y&lt;/code> to open the dialog:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/unigltf/glb_export_dialog.jpg" alt="image">&lt;/p>
&lt;h3 id="2-assign-a-gameobject-to-exportroot">2. Assign a GameObject to &lt;code>ExportRoot&lt;/code>&lt;/h3>
&lt;p>From the Hierarchy window, drag and drop a GameObject into the &lt;code>ExportRoot&lt;/code> field,
or you can click ◎ button on the right of the &lt;code>ExportRoot&lt;/code> field and select a GameObject from the dropdown list.&lt;/p>
&lt;ul>
&lt;li>Note that the root (topmost parent) of a GameObject you select should not be a &lt;code>GLTF&lt;/code> node, but a node stored in the scene with default position, rotation and scale.&lt;/li>
&lt;/ul>
&lt;h3 id="3-click-export-button">3. Click &lt;code>Export&lt;/code> button&lt;/h3>
&lt;p>A SaveFileDialog will pop up, choose a directory and export the GameObject as GLB.&lt;/p>
&lt;h2 id="exportable-components-for-glb">Exportable Components for GLB&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (Attach them to the child other than the topmost parent)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (Attach it to the child other than the topmost parent)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (Attach it to the topmost parent. For rotation, input the keyframe of Quaternion. Translation, rotation and scaling are supported. BlendShape is not supported yet)&lt;/li>
&lt;/ul>
&lt;h2 id="available-shader">Available Shader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>&lt;/li>
&lt;li>&lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code>, &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="before-v0680">Before &lt;code>v0.68.0&lt;/code>&lt;/h1>
&lt;h2 id="procedure">Procedure&lt;/h2>
&lt;p>The following is the procedure for creating the &lt;code>glb&lt;/code> file with UniGLTF module:&lt;/p>
&lt;h3 id="1-create-an-empty-scene">1. Create an empty scene.&lt;/h3>
&lt;h3 id="2-create-an-empty-gameobject-topmost-parent-no-translation-rotation-and-scale">2. Create an empty GameObject (topmost parent). No translation, rotation and scale.&lt;/h3>
&lt;p>The topmost parent (root) should not be a GLTF GameObject, but a GameObject in the scene.
Its translation, rotation and scale should be default values.&lt;/p>
&lt;h3 id="3-select-an-object-you-want-to-export-and-add-it-to-the-created-parent-gameobject">3. Select an object you want to export and add it to the created parent GameObject.&lt;/h3>
&lt;p>(In this example a Cube object is created. You can add arbitrary objects such as Prefab.)&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/root_cube.png" alt="image">&lt;/p>
&lt;h3 id="4-select-the-topmost-parent-gameobject-and-click-export-unigltf-xxx-export">4. Select the topmost parent GameObject and click &lt;code>Export&lt;/code> (&lt;code>UniGLTF-x.xx&lt;/code>-&amp;gt;&lt;code>Export&lt;/code>).&lt;/h3>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/menu_unigltf_export.png" alt="image">&lt;/p>
&lt;h3 id="5-enter-the-file-name-and-the-selected-gameobject-can-be-exported-as-the-glb-file">5. Enter the file name and the selected GameObject can be exported as the &lt;code>glb&lt;/code> file.&lt;/h3>
&lt;h2 id="exportable-components-for-glb-1">Exportable Components for GLB&lt;/h2>
&lt;ul>
&lt;li>&lt;code>MeshRenderer + MeshFilter&lt;/code> (Attach them to the child other than the topmost parent)&lt;/li>
&lt;li>&lt;code>SkinnedMeshRenderer&lt;/code> (Attach it to the child other than the topmost parent)&lt;/li>
&lt;li>&lt;code>Animation&lt;/code> (Attach it to the topmost parent. For rotation, input the keyframe of Quaternion. Translation, rotation and scaling are supported. BlendShape is not supported yet)&lt;/li>
&lt;/ul>
&lt;h2 id="available-shader-1">Available Shader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>, &lt;code>Unlit/Color&lt;/code>, &lt;code>Unlit/Texture&lt;/code>, &lt;code>Unlit/Transparent&lt;/code>, &lt;code>Unlit/Transparent Cutout&lt;/code> and &lt;code>UniGLTF/UniUnlit&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Animation</title><link>https://vrm.dev/en/docs/gltf/animation_exporter/</link><pubDate>Mon, 03 Aug 2020 16:07:54 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/animation_exporter/</guid><description>
&lt;p>The definition for Animation is available in GLTF.&lt;/p>
&lt;blockquote>
&lt;p>VRM specification does not include the Animation.&lt;/p>
&lt;/blockquote>
&lt;h3 id="version">Version&lt;/h3>
&lt;ul>
&lt;li>v0.44&lt;/li>
&lt;/ul>
&lt;h3 id="support-status">Support Status&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">KeyName&lt;/th>
&lt;th align="center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">TranslationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">RotationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ScaleKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">BlendShapeKey&lt;/td>
&lt;td align="center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="how-to-export-an-animator">How to Export an Animator&lt;/h3>
&lt;ol>
&lt;li>Add an Animator component to a root GameObject&lt;/li>
&lt;li>Create an AnimatorController and set it in the Controller box (&lt;code>Animator&lt;/code>-&amp;gt;&lt;code>Controller&lt;/code>) in the Inspector window&lt;/li>
&lt;li>From the UnityEditor&amp;rsquo;s toolbar, select &lt;code>Windows&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code> to open the Animation window&lt;/li>
&lt;li>Make sure the root GameObject is selected and click the Create button in the center of the Animation window for creating AnimationClip&lt;/li>
&lt;li>Add animation keys to this clip&lt;/li>
&lt;li>Export as the glb file from &lt;code>UniGLTF&lt;/code>-&amp;gt;&lt;code>Export&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="how-to-export-an-animation">How to Export an Animation&lt;/h3>
&lt;ol>
&lt;li>Add an Animation component to a root GameObject&lt;/li>
&lt;li>From the UnityEditor&amp;rsquo;s toolbar, select &lt;code>Windows&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code> to open the Animation window&lt;/li>
&lt;li>Make sure the root GameObject is selected and click the Create button in the center of the Animation window for creating AnimationClip&lt;/li>
&lt;li>Now select the created AnimationClip (the Project window) and switch to Debug mode (the Inspector window), and then turn on &lt;code>Legacy&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/LegacyClip.png" alt="Interpolation">&lt;/p>
&lt;ol start="5">
&lt;li>Set the created AnimationClip in the Animation box (&lt;code>Animation&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code>) in the Inspector window&lt;/li>
&lt;li>Add animation keys to this clip&lt;/li>
&lt;li>Export as the glb file from &lt;code>UniGLTF&lt;/code>-&amp;gt;&lt;code>Export&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="notes">Notes&lt;/h3>
&lt;ol>
&lt;li>Please set the Interpolation of RotationKey to either Quaternion or Euler Angles (Quaternion)
&lt;img src="https://vrm.dev/images/wiki/Interpolation.png" alt="Interpolation">&lt;/li>
&lt;li>For the Animator, all edited clips can be exported. However, the Animator states are not saved&lt;/li>
&lt;li>Though a created Animator goes through multiple animations (Animation State Machine), the UniGLTF Importer (UniGLTF-1.25) will only import the first one&lt;/li>
&lt;/ol></description></item><item><title>Docs: Emission and glow</title><link>https://vrm.dev/en/docs/gltf/emission_glow/</link><pubDate>Thu, 07 Oct 2021 21:04:07 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/emission_glow/</guid><description>
&lt;p>&lt;code>This is not an official extension of gltf.&lt;/code>&lt;/p>
&lt;h2 id="target-shader">Target shader&lt;/h2>
&lt;ul>
&lt;li>&lt;code>Standard&lt;/code>&lt;/li>
&lt;li>&lt;code>VRM10/MToon10&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="glow-of-posteffect-in-unity">Glow of PostEffect in Unity&lt;/h2>
&lt;p>A post effect that emits light when the Emission value exceeds 1.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/glow.jpg" width="300" />
&lt;p>It becomes stronger by exceeding 1 to 3 or 4, but this value cannot be stored due to the specifications of &lt;code>glTF&lt;/code>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Divide to 1&lt;/h4>
&lt;p>When exporting, do the following to force the maximum value to 1.&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">Vector3 emission;
&lt;span style="color:#078;font-weight:bold">var&lt;/span> max_value = get_max(emission); &lt;span style="color:#09f;font-style:italic">// Get the maximum value with r, g, b
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>&lt;span style="color:#069;font-weight:bold">if&lt;/span>(max_value&amp;gt;&lt;span style="color:#f60">1&lt;/span>)
{
emission = emission / max_value;
}
&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">vrm-0.x can be saved&lt;/h4>
vrm-0.x can be saved as there is no [0-1] limit.
&lt;/div>
&lt;h2 id="vrmc_materials_hdr_emissivemultiplier">VRMC_materials_hdr_emissiveMultiplier&lt;/h2>
&lt;p>We created &lt;code>VRMC_materials_hdr_emissiveMultiplier&lt;/code> to store a value greater than 1 in the emission.
Defines a float value to multiply against EmissiveFactor.&lt;/p>
&lt;p>&lt;code>EmissiveFactor = EmissiveFactor * multiplier (value greater than 1)&lt;/code>.&lt;/p>
&lt;p>It can be exported as VRM1 / GLB / GLTF with &lt;code>UniVRM-0.79&lt;/code> or later.&lt;/p>
&lt;p>Valid for MToon and PBR materials.&lt;/p>
&lt;p>Since there is a sample scene with PostEffect set
Please try it.&lt;/p>
&lt;p>&lt;code>UniVRM10-XXX.unitypackage&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>Assets/UniGLTF/Samples/LookDev/ballroom_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Assets/UniGLTF/Samples/LookDev/lilienstein_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Assets/UniGLTF/Samples/LookDev/moonless_golf_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>Assets/UniGLTF/Samples/LookDev/spruit_sunrise_1k.unity&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/pull/1123">https://github.com/vrm-c/UniVRM/pull/1123&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="how-to-load-in-unity-app">How to load in Unity app&lt;/h2>
&lt;ul>
&lt;li>Please load with &lt;code>UniVRM-0.79&lt;/code> or later&lt;/li>
&lt;li>Set PostEffect for your scene
&lt;ul>
&lt;li>&lt;code>Assets/UniGLTF/Samples/LookDev/RenderingServicePostProcessingProfile.asset&lt;/code> There is a sample profile&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="specification">Specification&lt;/h2>
&lt;p>&lt;a href="https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_materials_hdr_emissiveMultiplier-1.0_draft">https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_materials_hdr_emissiveMultiplier-1.0_draft&lt;/a>&lt;/p></description></item><item><title>Docs: Mesh Utility</title><link>https://vrm.dev/en/docs/gltf/mesh_utility/</link><pubDate>Tue, 02 Mar 2021 12:22:00 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/mesh_utility/</guid><description>
&lt;h1 id="meshutility">MeshUtility&lt;/h1>
&lt;p>Mesh processing tool in Unity platform.&lt;br>
Current available functions: &lt;code>MeshSeparator&lt;/code>, &lt;code>MeshIntegrator&lt;/code>, &lt;code>StaticMeshIntegrator&lt;/code> and &lt;code>BoneMeshEraser&lt;/code>.&lt;/p>
&lt;h2 id="example-of-usage">Example of Usage&lt;/h2>
&lt;p>Here we show how to use &lt;code>MeshSeparator&lt;/code>. The usages for all the functions are roughly the same.&lt;br>
Suppose we want to split meshes contained BlendShape.
We first select the GameObject of a model:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp1.jpg" width="200" />
&lt;hr>
&lt;p>Or directly drag and drop the GameObject to the &lt;code>TargetObject&lt;/code> field as shown below.&lt;br>
At the top of Unity Editor, click &lt;code>UniGLTF&lt;/code> -&amp;gt; &lt;code>MeshUtility&lt;/code> -&amp;gt; &lt;code>MeshProcessing Wizard&lt;/code> to display Mesh Processing Window:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_en_exp2.jpg" width="800" />
&lt;hr>
&lt;p>Click &lt;code>Process&lt;/code> to generate the output (GameObject) and export it by &lt;code>VRM0&lt;/code> -&amp;gt; &lt;code>Export UniVRM-0.xx&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp3.jpg" width="300" />
&lt;hr>
&lt;p>The split meshes are also saved in the &lt;code>Assets&lt;/code> folder.&lt;br>
In this example, the model&amp;rsquo;s mesh are split into two parts: face and body:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">Face: with BlendShape&lt;/th>
&lt;th align="center">Body: without BlendShape&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_1.jpg" width="200" />
&lt;/td>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_2.jpg" width="200" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="meshseparator">MeshSeparator&lt;/h3>
&lt;p>Separate meshes contained BlendShape. The BlendShape size can be potentially reduced.&lt;/p>
&lt;h3 id="meshintegrator">MeshIntegrator&lt;/h3>
&lt;p>Integrate all the meshes of a (prefab) GameObject. Meshes w/ BlendShape will be grouped into another one.&lt;/p>
&lt;h3 id="staticmeshintegrator">StaticMeshIntegrator&lt;/h3>
&lt;p>Integrate all the static meshes of a (prefab) GameObject (Root and its children).&lt;/p>
&lt;h3 id="bonemesheraser">BoneMeshEraser&lt;/h3>
&lt;p>Eliminate meshes associated with the bones in EraseRoot hierarchy.&lt;/p></description></item></channel></rss>