<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – Humanoid</title><link>https://vrm.dev/en/docs/univrm/humanoid/</link><description>Recent content in Humanoid on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Thu, 06 Aug 2020 18:09:15 +0900</lastBuildDate><atom:link href="https://vrm.dev/en/docs/univrm/humanoid/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Humanoid Overview</title><link>https://vrm.dev/en/docs/univrm/humanoid/humanoid_overview/</link><pubDate>Fri, 18 Sep 2020 13:02:07 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/humanoid/humanoid_overview/</guid><description>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;p>VRM humanoid is compatible with the motion of MotionCapture&amp;rsquo;s FK (Forward Kinematics).&lt;/p>
&lt;p>The motion for one frame has the information described below:&lt;/p>
&lt;ul>
&lt;li>The Translation for Hips bone&lt;/li>
&lt;li>The Rotation for each bone&lt;/li>
&lt;/ul>
&lt;p>To reproduce the same pose in the Unity Scene (transferring data to a GameObject containing humanoid structure), the following conditions need to be satisfied:&lt;/p>
&lt;ul>
&lt;li>Each bone (hips, spine, chest&amp;hellip;) corresponds to its humanoid skeleton in GLTF Node (Unity GameObject)&lt;/li>
&lt;li>The Bones&amp;rsquo; parent-child relationships are known.&lt;/li>
&lt;li>T-Pose must be the initial pose&lt;/li>
&lt;/ul>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If the ratio (e.g. crotch - knee - ankle) is uncommon, the same pose cannot be reproduced.
&lt;/div>
&lt;p>The creation of humanoid avatar is pretty much the same as the original:&lt;/p>
&lt;p>&lt;a href="https://docs.unity3d.com/Manual/AvatarCreationandSetup.html">https://docs.unity3d.com/Manual/AvatarCreationandSetup.html&lt;/a>&lt;/p>
&lt;p>In addition, to make it easier to handle in the program, VRM Humanoid has the following features:&lt;/p>
&lt;ul>
&lt;li>For the initial pose, all the Gltf Nodes (Unity GameObject) have no rotation&lt;/li>
&lt;li>No scaling changes&lt;/li>
&lt;/ul>
&lt;h2 id="t-pose">T-Pose&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/T_pose.png" alt="T_pose" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>T-Pose example&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>Palm faces downward, and it is parallel to the ground along x axis&lt;/li>
&lt;li>Thumb is parallel to the ground half way 45 degrees between x and z axis (the perspective view from the top)&lt;/li>
&lt;/ul>
&lt;h2 id="unity-humanoid">Unity Humanoid&lt;/h2>
&lt;p>In Unity, there is an object called &lt;code>Avatar&lt;/code>, which can be used to set up the model in humanoid mode.
Since the Humanoid Avatar settings are part of &lt;code>fbx importer&lt;/code>, basically the model with Humanoid Avatar from data other than fbx cannot be created.
However, we can still create the Humanoid Avatar via program. See &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/">humanoid component&lt;/a>.&lt;/p>
&lt;h2 id="compatible-with-bvh">Compatible with BVH&lt;/h2>
&lt;p>Compatible with BVH that has the initial pose as &lt;code>T-Pose&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>Substitute the translation value into hips&lt;/li>
&lt;li>Substitute the relative rotation value into its child&lt;/li>
&lt;/ul>
&lt;h2 id="details">Details&lt;/h2>
&lt;p>For the list of human bones, please refer to:&lt;/p>
&lt;p>&lt;a href="https://docs.unity3d.com/2019.4/Documentation/ScriptReference/HumanBodyBones.html">https://docs.unity3d.com/2019.4/Documentation/ScriptReference/HumanBodyBones.html&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Target nodes not containing skinning (GLTF skin, joint and Unity SkinnedMeshRenderer, etc.) can be selected&lt;/li>
&lt;li>All required bones must be included&lt;/li>
&lt;li>The Bone&amp;rsquo;s parent-child relationship follows the humanoid definition (The first ancestor bone found in LowerLeg is UpperLeg etc.)&lt;/li>
&lt;li>The parent-child relationships for hips as root are described below. Bones that are in parentheses are non-required bones (optional):
&lt;ul>
&lt;li>
&lt;p>hips - spine - chest - (upper chest) - neck - head&lt;/p>
&lt;ul>
&lt;li>[Branch] from head - left - (eye)&lt;/li>
&lt;li>[Branch] from head - right - (eye)&lt;/li>
&lt;li>[Branch] from chest or upper chest - left - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li>
&lt;li>[Branch] from chest or upper chest - right - (shoulder) - upper arm - lower arm - hand - (fingers)&lt;/li>
&lt;li>[Branch] from hips - left - upper leg - lower leg - foot - (toes)&lt;/li>
&lt;li>[Branch] from hips - right - upper leg - lower leg - foot - (toes)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Inserting non-bone objects between humanoid bones is allowable (e.g., LowerLeg’s parent is a Cube GameObject and this Cube’s parent is UpperLeg, etc.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Non-required bones can be skipped (UpperArm&amp;rsquo;s parent can be chest instead of shoulder)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="related-issues">Related Issues&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vrm-c/vrm-specification/issues/87">https://github.com/vrm-c/vrm-specification/issues/87&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="references">References&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blogs.unity3d.com/jp/2014/05/26/mecanim-humanoids/">Mecanim Humanoids&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/ousttrue/items/aead1c943855561b62e7">BlenderからUnityのHumanoid互換でfbxをエクスポートする&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="supplementary-information-regarding-t-pose">Supplementary Information regarding T-Pose&lt;/h2>
&lt;p>To normalize a model, the model with T-Pose is required.&lt;/p>
&lt;p>If the model doesn&amp;rsquo;t have T-Pose, you can make a T-Pose by doing any of the followings:&lt;/p>
&lt;ul>
&lt;li>Click &lt;code>Menu&lt;/code> on top and select &lt;code>Export humanoid&lt;/code> from &lt;code>VRM&lt;/code> -&amp;gt; &lt;code>UniVRM-0.XX&lt;/code> -&amp;gt; &lt;code>Export humanoid&lt;/code>. The export dialog will pop up. Enable &lt;code>force T-Pose&lt;/code>&lt;/li>
&lt;li>Make T-Pose for the model by manually adjusting the rotation of the arm etc.&lt;/li>
&lt;/ul>
&lt;p>If the T-Pose made by the first option (automatic T-Pose) didn&amp;rsquo;t go well, try to make T-Pose manually.&lt;/p>
&lt;p>Also, if a model&amp;rsquo;s normalization have been done once before, please avoid re-normalizing the model as much as you can as the accuracy may gradually deviate from standard.&lt;/p>
&lt;p>The &lt;code>Force T-Pose&lt;/code> option will be unchecked by default if the model&amp;rsquo;s normalization was already done before. That being said, the system will detect whether the model contain Meta component.&lt;/p>
&lt;h2 id="common-issues">Common Issues&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Jaw&amp;rsquo;s position is incorrect: during T-Pose process, there is a possibility that the jaw&amp;rsquo;s position is different than before. If this is the case, please remove &lt;code>jaw&lt;/code> (chin) bone setting from the model&amp;rsquo;s (FBX) &lt;code>Import setting&lt;/code> -&amp;gt; &lt;code>Rig&lt;/code>. There is no influence on model if jaw bone is not used&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Facial parts (bangs, etc.) have weird movements: during T-Pose process, there is a possibility that the jaw&amp;rsquo;s position is different than before. That is, facial parts (e.g. bangs) are mis-recognized as jaw and being assigned to Jaw bone. As such, bangs&amp;rsquo; movements become weird due to this issue. Please remove &lt;code>jaw&lt;/code> bone setting from the model&amp;rsquo;s (FBX) &lt;code>Import setting&lt;/code> -&amp;gt; &lt;code>Rig&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docs: Create Base VRM Model</title><link>https://vrm.dev/en/docs/univrm/humanoid/base_model/</link><pubDate>Wed, 14 Oct 2020 17:46:52 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/humanoid/base_model/</guid><description>
&lt;p>The target &lt;code>GameObject&lt;/code> can be exported as VRM if the following two conditions are fulfilled:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Animator&lt;/code> component is attached&lt;/li>
&lt;li>&lt;code>Animator's HumanoidAvatar&lt;/code> is set up&lt;/li>
&lt;/ul>
&lt;h2 id="fbx">FBX&lt;/h2>
&lt;p>To meet the conditions described above for an imported fbx, set the fbx model as &lt;code>humanoid&lt;/code> from &lt;code>Import Settings -&amp;gt; Rig -&amp;gt; Animation Type&lt;/code>.
After &lt;code>humanoid&lt;/code> type is applied, &lt;code>Animator&lt;/code> component with &lt;code>HumanoidAvatar&lt;/code> will be attached to the fbx&amp;rsquo;s prefab.&lt;/p>
&lt;p>To convert the fbx model to &lt;code>humanoid&lt;/code> type successfully:&lt;/p>
&lt;ul>
&lt;li>All &lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.md#defined-bones">required bones&lt;/a> are included&lt;/li>
&lt;li>Bones&amp;rsquo; parent-child relationships are correct (e.g. hips -&amp;gt; leg -&amp;gt; foot. not the other way around).&lt;/li>
&lt;/ul>
&lt;p>No restrictions on bone naming.&lt;/p>
&lt;h2 id="modify-fbx-in-the-scene">Modify FBX in the scene&lt;/h2>
&lt;p>You can modify fbx&amp;rsquo;s GameObject by&lt;/p>
&lt;ul>
&lt;li>adding children GameObjects to Parent GameObjects&lt;/li>
&lt;li>disabling GameObjects&lt;/li>
&lt;/ul>
&lt;p>If you want to change the hierarchy structure, please refer to &lt;code>HumanoidComponent&lt;/code>, which is described in the next section.&lt;/p>
&lt;h2 id="create-humanoidavatar-manually-from-gameobject">Create HumanoidAvatar manually from GameObject&lt;/h2>
&lt;p>&lt;code>HumanoidAvatar&lt;/code> can be created without using &lt;code>fbx importer&lt;/code>.
Check out &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/">Humanoid Component&lt;/a> for more details.&lt;/p>
&lt;p>If the following types of models are in the scene:&lt;/p>
&lt;ul>
&lt;li>Humanoid model in GLTF format&lt;/li>
&lt;li>Humanoid-like model made by cubes and so on&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>HumanoidAvatar&lt;/code> can be created as long as each required bone is assigned accordingly based on the object in Hierarchy.
Finally, to export the target &lt;code>GameObject&lt;/code> as VRM, attach &lt;code>Animator&lt;/code> component and assign the created &lt;code>HumanoidAvatar&lt;/code> to &lt;code>Avatar&lt;/code> field.&lt;/p></description></item><item><title>Docs: Humanoid Component</title><link>https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/</link><pubDate>Thu, 15 Oct 2020 18:23:26 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/</guid><description>
&lt;p>&lt;code>UniVRM-0.60.0~&lt;/code>&lt;/p>
&lt;p>A humanoid avatar can be created directly from the Scene without fbx.&lt;/p>
&lt;h1 id="how-to-use">How to use&lt;/h1>
&lt;p>Prepare a rigged model in the scene.&lt;/p>
&lt;p>We will take the model in the following link as an example:&lt;/p>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary&lt;/a>&lt;/p>
&lt;p>First, import &lt;code>RiggedFigure.glb&lt;/code> into the &lt;code>Assets&lt;/code> folder.
If UniVRM package is installed, the &lt;code>Prefab&lt;/code> file can be automatically generated from the imported &lt;code>glb&lt;/code>.&lt;/p>
&lt;p>Drag the &lt;code>Prefab&lt;/code> file to the &lt;code>Hierarchy&lt;/code> window. A GameObject associated with this &lt;code>Prefab&lt;/code> is instantiated.&lt;/p>
&lt;p>Click on the GameObject in the &lt;code>Hierarchy&lt;/code> window, then add a humanoid component (&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; Humanoid&lt;/code>).&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bone_required.jpg" />
&lt;p>As shown in the image above, assign required bones.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/create_avatar.jpg" />
&lt;p>Press &lt;code>Create UnityEngine.Avatar&lt;/code> button.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/humanoid_animator.jpg" />
&lt;p>Now a humanoid avatar is created. You can make a T-pose for the model and convert it to VRM.&lt;/p></description></item></channel></rss>