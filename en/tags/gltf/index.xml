<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>VRM – gltf</title>
    <link>https://vrm.dev/en/tags/gltf/</link>
    <description>Recent content in gltf on VRM</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 07 Oct 2021 21:04:07 +0900</lastBuildDate>
    
	  <atom:link href="https://vrm.dev/en/tags/gltf/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: GLB Import</title>
      <link>https://vrm.dev/en/docs/gltf/glb_import/</link>
      <pubDate>Mon, 12 Oct 2020 15:51:08 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/gltf/glb_import/</guid>
      <description>
        
        
        &lt;h2 id=&#34;import-glb-file-in-editor-mode&#34;&gt;Import GLB file in Editor Mode&lt;/h2&gt;
&lt;p&gt;The procedure is the same as &lt;a href=&#34;https://vrm.dev/en/docs/univrm/import/univrm_import/&#34;&gt;VRM import&lt;/a&gt;. Just drag and drop the GLB file into the &lt;strong&gt;Assets&lt;/strong&gt; folder.&lt;/p&gt;
&lt;p&gt;Starting with &lt;code&gt;v0.68.0&lt;/code&gt;, we use &lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet&#34;&gt;DamagedHelmet&lt;/a&gt; as an example to illustrate import settings.&lt;/p&gt;
&lt;h3 id=&#34;reverseaxis-setting&#34;&gt;&lt;code&gt;ReverseAxis&lt;/code&gt; Setting&lt;/h3&gt;
&lt;p&gt;The axis you want to reverse can be selected when transforming from glTF&amp;rsquo;s right-handed, Y-UP coordinate to Unity&amp;rsquo;s left-handed Y-UP coordinate.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Z-axis (same as before v0.68.0)&lt;/li&gt;
&lt;li&gt;X-axis (added from v0.68.0)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_axis.gif&#34;  width=&#34;400&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;Select &lt;code&gt;Reverse Axis&lt;/code&gt; X or Z and click &lt;code&gt;Apply&lt;/code&gt; button. The result will be reflected as shown in the image above.&lt;/p&gt;
&lt;h3 id=&#34;extract-materials-and-textures-&#34;&gt;&lt;code&gt;Extract Materials and Textures ...&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Same as we did in &lt;a href=&#34;https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/#fbxs-material-setup&#34;&gt;fbx import&lt;/a&gt;, initially material and textures will be imported into GLB.
In this state, the settings for materials/textures are unchangeable (&lt;code&gt;Readonly&lt;/code&gt; mode).&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_material_tab.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;By clicking &lt;code&gt;Extract Materials and Textures ...&lt;/code&gt;, materials and textures are extracted as external assets (&lt;code&gt;Material.asset&lt;/code&gt;, &lt;code&gt;Texture.png/jpg&lt;/code&gt;).
In this way, the settings for materials/textures can be changed.&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_material_tab_extracted.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;The image above shows that reference resources for materials/textures are properly assigned in &lt;code&gt;Remapped Materials&lt;/code&gt; and &lt;code&gt;Remapped Textures&lt;/code&gt; sections.
Click &lt;code&gt;Clear&lt;/code&gt; button to reset Material/Texture reference settings.&lt;/p&gt;
&lt;h3 id=&#34;glb-extract&#34;&gt;glb extract&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&#34;&gt;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF-Binary&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;clear&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;In the initial state (clear), the related Asset (Mesh, Material, Texture, AnimationClip) are stored as SubAsset of GLB:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;texture_1.metallicRoughness&lt;/code&gt; is converted from &lt;code&gt;texture_1&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_3.occlusion&lt;/code&gt; is converted from &lt;code&gt;textrue_3&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_4.normal&lt;/code&gt; is converted from &lt;code&gt;textrue_4&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_clear.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;h4 id=&#34;extract&#34;&gt;extract&lt;/h4&gt;
&lt;p&gt;By clicking &lt;code&gt;Extract Materials and Textures ...&lt;/code&gt;, materials/textures listed below will be generated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Material_MR.mat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_0.jpg&lt;/code&gt; (color)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_1.metallicRoughness.png&lt;/code&gt;. Converted from &lt;code&gt;texture_1&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_2.jpg&lt;/code&gt; (emission)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_3.occlusion.png&lt;/code&gt;. Converted from &lt;code&gt;texture_3&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader&lt;/li&gt;
&lt;li&gt;&lt;code&gt;texture_4.jpg&lt;/code&gt; (normalMap)&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_extract.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;h3 id=&#34;gltf-extract&#34;&gt;gltf extract&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&#34;&gt;https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/DamagedHelmet/glTF&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;clear-1&#34;&gt;clear&lt;/h4&gt;
&lt;p&gt;In the initial state (clear), the related Asset (Mesh, Material, Texture, AnimationClip) are stored as SubAsset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Default_AO.occlusion&lt;/code&gt; is converted from &lt;code&gt;Default_AO&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Defualt_metalRoughness.metallicRoughness&lt;/code&gt; is converted from &lt;code&gt;Defualt_metalRoughness&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/gltf_clear.jpg&#34;  width=&#34;400&#34; /&gt;

&lt;h4 id=&#34;extract-1&#34;&gt;extract&lt;/h4&gt;
&lt;p&gt;By clicking &lt;code&gt;Extract Materials and Textures ...&lt;/code&gt;, materials/textures listed below will be generated:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Material_MR.mat&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Default_AO.occlusion.png&lt;/code&gt;. Converted from &lt;code&gt;Default_AO&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Default_metalRoughness.metallicRoughness.png&lt;/code&gt;. Converted from &lt;code&gt;Default_metalRoughness&lt;/code&gt; to be used in Unity&amp;rsquo;s Standard Shader&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;https://vrm.dev/images/unigltf/gltf_extract.jpg&#34;  width=&#34;400&#34; /&gt;


      </description>
    </item>
    
    <item>
      <title>Docs: GLB Export</title>
      <link>https://vrm.dev/en/docs/gltf/glb_export/</link>
      <pubDate>Mon, 03 Aug 2020 16:07:54 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/gltf/glb_export/</guid>
      <description>
        
        
        &lt;p&gt;Starting with &lt;code&gt;v0.68.0&lt;/code&gt;, the &lt;code&gt;glb&lt;/code&gt; file can be create with &lt;code&gt;UniGLTF&lt;/code&gt; module.&lt;/p&gt;
&lt;p&gt;The procedure for creating a glb file is described as follows:&lt;/p&gt;
&lt;h3 id=&#34;1-open-unigltfexport-unigltf-2xy&#34;&gt;1. Open &lt;code&gt;UniGLTF/Export UniGLTF-2.X.Y&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;At the top of Unity Editor, click &lt;code&gt;UniGLTF&lt;/code&gt; -&amp;gt; &lt;code&gt;UniGLTF-2.X.Y&lt;/code&gt; to open the dialog:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/unigltf/glb_export_dialog.jpg&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;2-assign-a-gameobject-to-exportroot&#34;&gt;2. Assign a GameObject to &lt;code&gt;ExportRoot&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;From the Hierarchy window, drag and drop a GameObject into the &lt;code&gt;ExportRoot&lt;/code&gt; field,
or you can click ◎ button on the right of the &lt;code&gt;ExportRoot&lt;/code&gt; field and select a GameObject from the dropdown list.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Note that the root (topmost parent) of a GameObject you select should not be a &lt;code&gt;GLTF&lt;/code&gt; node, but a node stored in the scene with default position, rotation and scale.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-click-export-button&#34;&gt;3. Click &lt;code&gt;Export&lt;/code&gt; button&lt;/h3&gt;
&lt;p&gt;A SaveFileDialog will pop up, choose a directory and export the GameObject as GLB.&lt;/p&gt;
&lt;h2 id=&#34;exportable-components-for-glb&#34;&gt;Exportable Components for GLB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MeshRenderer + MeshFilter&lt;/code&gt; (Attach them to the child other than the topmost parent)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SkinnedMeshRenderer&lt;/code&gt; (Attach it to the child other than the topmost parent)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Animation&lt;/code&gt; (Attach it to the topmost parent. For rotation, input the keyframe of Quaternion. Translation, rotation and scaling are supported. BlendShape is not supported yet)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;available-shader&#34;&gt;Available Shader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Standard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Unlit/Color&lt;/code&gt;, &lt;code&gt;Unlit/Texture&lt;/code&gt;, &lt;code&gt;Unlit/Transparent&lt;/code&gt;, &lt;code&gt;Unlit/Transparent Cutout&lt;/code&gt;, &lt;code&gt;UniGLTF/UniUnlit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;before-v0680&#34;&gt;Before &lt;code&gt;v0.68.0&lt;/code&gt;&lt;/h1&gt;
&lt;h2 id=&#34;procedure&#34;&gt;Procedure&lt;/h2&gt;
&lt;p&gt;The following is the procedure for creating the &lt;code&gt;glb&lt;/code&gt; file with UniGLTF module:&lt;/p&gt;
&lt;h3 id=&#34;1-create-an-empty-scene&#34;&gt;1. Create an empty scene.&lt;/h3&gt;
&lt;h3 id=&#34;2-create-an-empty-gameobject-topmost-parent-no-translation-rotation-and-scale&#34;&gt;2. Create an empty GameObject (topmost parent). No translation, rotation and scale.&lt;/h3&gt;
&lt;p&gt;The topmost parent (root) should not be a GLTF GameObject, but a GameObject in the scene.
Its translation, rotation and scale should be default values.&lt;/p&gt;
&lt;h3 id=&#34;3-select-an-object-you-want-to-export-and-add-it-to-the-created-parent-gameobject&#34;&gt;3. Select an object you want to export and add it to the created parent GameObject.&lt;/h3&gt;
&lt;p&gt;(In this example a Cube object is created. You can add arbitrary objects such as Prefab.)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/wiki/root_cube.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-select-the-topmost-parent-gameobject-and-click-export-unigltf-xxx-export&#34;&gt;4. Select the topmost parent GameObject and click &lt;code&gt;Export&lt;/code&gt; (&lt;code&gt;UniGLTF-x.xx&lt;/code&gt;-&amp;gt;&lt;code&gt;Export&lt;/code&gt;).&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/wiki/menu_unigltf_export.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;5-enter-the-file-name-and-the-selected-gameobject-can-be-exported-as-the-glb-file&#34;&gt;5. Enter the file name and the selected GameObject can be exported as the &lt;code&gt;glb&lt;/code&gt; file.&lt;/h3&gt;
&lt;h2 id=&#34;exportable-components-for-glb-1&#34;&gt;Exportable Components for GLB&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MeshRenderer + MeshFilter&lt;/code&gt; (Attach them to the child other than the topmost parent)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SkinnedMeshRenderer&lt;/code&gt; (Attach it to the child other than the topmost parent)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Animation&lt;/code&gt; (Attach it to the topmost parent. For rotation, input the keyframe of Quaternion. Translation, rotation and scaling are supported. BlendShape is not supported yet)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;available-shader-1&#34;&gt;Available Shader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Standard&lt;/code&gt;, &lt;code&gt;Unlit/Color&lt;/code&gt;, &lt;code&gt;Unlit/Texture&lt;/code&gt;, &lt;code&gt;Unlit/Transparent&lt;/code&gt;, &lt;code&gt;Unlit/Transparent Cutout&lt;/code&gt; and &lt;code&gt;UniGLTF/UniUnlit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Animation</title>
      <link>https://vrm.dev/en/docs/gltf/animation_exporter/</link>
      <pubDate>Mon, 03 Aug 2020 16:07:54 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/gltf/animation_exporter/</guid>
      <description>
        
        
        &lt;p&gt;The definition for Animation is available in GLTF.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VRM specification does not include the Animation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;version&#34;&gt;Version&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;v0.44&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;support-status&#34;&gt;Support Status&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;KeyName&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;TranslationKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;RotationKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ScaleKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;○&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;BlendShapeKey&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;hr&gt;
&lt;h3 id=&#34;how-to-export-an-animator&#34;&gt;How to Export an Animator&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add an Animator component to a root GameObject&lt;/li&gt;
&lt;li&gt;Create an AnimatorController and set it in the Controller box (&lt;code&gt;Animator&lt;/code&gt;-&amp;gt;&lt;code&gt;Controller&lt;/code&gt;) in the Inspector window&lt;/li&gt;
&lt;li&gt;From the UnityEditor&amp;rsquo;s toolbar, select &lt;code&gt;Windows&lt;/code&gt;-&amp;gt;&lt;code&gt;Animation&lt;/code&gt;-&amp;gt;&lt;code&gt;Animation&lt;/code&gt; to open the Animation window&lt;/li&gt;
&lt;li&gt;Make sure the root GameObject is selected and click the Create button in the center of the Animation window for creating AnimationClip&lt;/li&gt;
&lt;li&gt;Add animation keys to this clip&lt;/li&gt;
&lt;li&gt;Export as the glb file from &lt;code&gt;UniGLTF&lt;/code&gt;-&amp;gt;&lt;code&gt;Export&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;how-to-export-an-animation&#34;&gt;How to Export an Animation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add an Animation component to a root GameObject&lt;/li&gt;
&lt;li&gt;From the UnityEditor&amp;rsquo;s toolbar, select &lt;code&gt;Windows&lt;/code&gt;-&amp;gt;&lt;code&gt;Animation&lt;/code&gt;-&amp;gt;&lt;code&gt;Animation&lt;/code&gt; to open the Animation window&lt;/li&gt;
&lt;li&gt;Make sure the root GameObject is selected and click the Create button in the center of the Animation window for creating AnimationClip&lt;/li&gt;
&lt;li&gt;Now select the created AnimationClip (the Project window) and switch to Debug mode (the Inspector window), and then turn on &lt;code&gt;Legacy&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://vrm.dev/images/wiki/LegacyClip.png&#34; alt=&#34;Interpolation&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Set the created AnimationClip in the Animation box (&lt;code&gt;Animation&lt;/code&gt;-&amp;gt;&lt;code&gt;Animation&lt;/code&gt;) in the Inspector window&lt;/li&gt;
&lt;li&gt;Add animation keys to this clip&lt;/li&gt;
&lt;li&gt;Export as the glb file from &lt;code&gt;UniGLTF&lt;/code&gt;-&amp;gt;&lt;code&gt;Export&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Please set the Interpolation of RotationKey to either Quaternion or Euler Angles (Quaternion)
&lt;img src=&#34;https://vrm.dev/images/wiki/Interpolation.png&#34; alt=&#34;Interpolation&#34;&gt;&lt;/li&gt;
&lt;li&gt;For the Animator, all edited clips can be exported. However, the Animator states are not saved&lt;/li&gt;
&lt;li&gt;Though a created Animator goes through multiple animations (Animation State Machine), the UniGLTF Importer (UniGLTF-1.25) will only import the first one&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Emission and glow</title>
      <link>https://vrm.dev/en/docs/gltf/emission_glow/</link>
      <pubDate>Thu, 07 Oct 2021 21:04:07 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/gltf/emission_glow/</guid>
      <description>
        
        
        &lt;p&gt;&lt;code&gt;This is not an official extension of gltf.&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;target-shader&#34;&gt;Target shader&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Standard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;VRM10/MToon10&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;glow-of-posteffect-in-unity&#34;&gt;Glow of PostEffect in Unity&lt;/h2&gt;
&lt;p&gt;A post effect that emits light when the Emission value exceeds 1.&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm10/glow.jpg&#34;  width=&#34;300&#34; /&gt;

&lt;p&gt;It becomes stronger by exceeding 1 to 3 or 4, but this value cannot be stored due to the specifications of &lt;code&gt;glTF&lt;/code&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Divide to 1&lt;/h4&gt;

    &lt;p&gt;When exporting, do the following to force the maximum value to 1.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;Vector3 emission;
&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;var&lt;/span&gt; max_value = get_max(emission); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Get the maximum value with r, g, b
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;(max_value&amp;gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;)
{
  emission = emission / max_value;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;



&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;vrm-0.x can be saved&lt;/h4&gt;

    vrm-0.x can be saved as there is no [0-1] limit.

&lt;/div&gt;

&lt;h2 id=&#34;vrmc_materials_hdr_emissivemultiplier&#34;&gt;VRMC_materials_hdr_emissiveMultiplier&lt;/h2&gt;
&lt;p&gt;We created &lt;code&gt;VRMC_materials_hdr_emissiveMultiplier&lt;/code&gt; to store a value greater than 1 in the emission.
Defines a float value to multiply against EmissiveFactor.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EmissiveFactor = EmissiveFactor * multiplier (value greater than 1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;It can be exported as VRM1 / GLB / GLTF with &lt;code&gt;UniVRM-0.79&lt;/code&gt; or later.&lt;/p&gt;
&lt;p&gt;Valid for MToon and PBR materials.&lt;/p&gt;
&lt;p&gt;Since there is a sample scene with PostEffect set
Please try it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;UniVRM10-XXX.unitypackage&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Assets/UniGLTF/Samples/LookDev/ballroom_1k.unity&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Assets/UniGLTF/Samples/LookDev/lilienstein_1k.unity&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Assets/UniGLTF/Samples/LookDev/moonless_golf_1k.unity&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Assets/UniGLTF/Samples/LookDev/spruit_sunrise_1k.unity&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vrm-c/UniVRM/pull/1123&#34;&gt;https://github.com/vrm-c/UniVRM/pull/1123&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;how-to-load-in-unity-app&#34;&gt;How to load in Unity app&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Please load with &lt;code&gt;UniVRM-0.79&lt;/code&gt; or later&lt;/li&gt;
&lt;li&gt;Set PostEffect for your scene
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assets/UniGLTF/Samples/LookDev/RenderingServicePostProcessingProfile.asset&lt;/code&gt; There is a sample profile&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;specification&#34;&gt;Specification&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_materials_hdr_emissiveMultiplier-1.0_draft&#34;&gt;https://github.com/vrm-c/vrm-specification/tree/master/specification/VRMC_materials_hdr_emissiveMultiplier-1.0_draft&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Mesh Utility</title>
      <link>https://vrm.dev/en/docs/gltf/mesh_utility/</link>
      <pubDate>Tue, 02 Mar 2021 12:22:00 +0900</pubDate>
      
      <guid>https://vrm.dev/en/docs/gltf/mesh_utility/</guid>
      <description>
        
        
        &lt;h1 id=&#34;meshutility&#34;&gt;MeshUtility&lt;/h1&gt;
&lt;p&gt;Mesh processing tool in Unity platform.&lt;br&gt;
Current available functions: &lt;code&gt;MeshSeparator&lt;/code&gt;, &lt;code&gt;MeshIntegrator&lt;/code&gt;, &lt;code&gt;StaticMeshIntegrator&lt;/code&gt; and &lt;code&gt;BoneMeshEraser&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;example-of-usage&#34;&gt;Example of Usage&lt;/h2&gt;
&lt;p&gt;Here we show how to use &lt;code&gt;MeshSeparator&lt;/code&gt;. The usages for all the functions are roughly the same.&lt;br&gt;
Suppose we want to split meshes contained BlendShape.
We first select the GameObject of a model:&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_utility_exp1.jpg&#34;  width=&#34;200&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;Or directly drag and drop the GameObject to the &lt;code&gt;TargetObject&lt;/code&gt; field as shown below.&lt;br&gt;
At the top of Unity Editor, click &lt;code&gt;UniGLTF&lt;/code&gt; -&amp;gt; &lt;code&gt;MeshUtility&lt;/code&gt; -&amp;gt; &lt;code&gt;MeshProcessing Wizard&lt;/code&gt; to display Mesh Processing Window:&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_utility_en_exp2.jpg&#34;  width=&#34;800&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;Click &lt;code&gt;Process&lt;/code&gt; to generate the output (GameObject) and export it by &lt;code&gt;VRM0&lt;/code&gt; -&amp;gt; &lt;code&gt;Export UniVRM-0.xx&lt;/code&gt;:&lt;/p&gt;
&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_utility_exp3.jpg&#34;  width=&#34;300&#34; /&gt;

&lt;hr&gt;
&lt;p&gt;The split meshes are also saved in the &lt;code&gt;Assets&lt;/code&gt; folder.&lt;br&gt;
In this example, the model&amp;rsquo;s mesh are split into two parts: face and body:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;Face: with BlendShape&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Body: without BlendShape&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_sep_result_1.jpg&#34;  width=&#34;200&#34; /&gt;
&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://vrm.dev/images/vrm/mesh_sep_result_2.jpg&#34;  width=&#34;200&#34; /&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;meshseparator&#34;&gt;MeshSeparator&lt;/h3&gt;
&lt;p&gt;Separate meshes contained BlendShape. The BlendShape size can be potentially reduced.&lt;/p&gt;
&lt;h3 id=&#34;meshintegrator&#34;&gt;MeshIntegrator&lt;/h3&gt;
&lt;p&gt;Integrate all the meshes of a (prefab) GameObject. Meshes w/ BlendShape will be grouped into another one.&lt;/p&gt;
&lt;h3 id=&#34;staticmeshintegrator&#34;&gt;StaticMeshIntegrator&lt;/h3&gt;
&lt;p&gt;Integrate all the static meshes of a (prefab) GameObject (Root and its children).&lt;/p&gt;
&lt;h3 id=&#34;bonemesheraser&#34;&gt;BoneMeshEraser&lt;/h3&gt;
&lt;p&gt;Eliminate meshes associated with the bones in EraseRoot hierarchy.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
