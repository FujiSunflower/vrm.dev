<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>VRM – unity</title><link>https://vrm.dev/en/tags/unity/</link><description>Recent content in unity on VRM</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 02 Mar 2021 12:22:00 +0900</lastBuildDate><atom:link href="https://vrm.dev/en/tags/unity/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: 0. Create a Unity project and install UniVRM</title><link>https://vrm.dev/en/docs/vrm/how_to_make_vrm/setup_unity/</link><pubDate>Thu, 12 Nov 2020 11:24:17 +0900</pubDate><guid>https://vrm.dev/en/docs/vrm/how_to_make_vrm/setup_unity/</guid><description>
&lt;h2 id="download-univrm">Download UniVRM&lt;/h2>
&lt;p>Download the latest version of UniVRM (&lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code>) in the release page:&lt;/p>
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/download_unitypackage.png" alt="download_unitypackage">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">XX YY&lt;/h4>
XX is UniVRM version. YYYY is version ID
&lt;/div>
&lt;h2 id="install-unity">Install Unity&lt;/h2>
&lt;p>&lt;a href="https://docs.unity3d.com/Manual/GettingStartedInstallingUnity.html">https://docs.unity3d.com/Manual/GettingStartedInstallingUnity.html&lt;/a>&lt;/p>
&lt;p>Make sure the &lt;a href="https://vrm.dev/en/docs/univrm/install/unity_version/">Unity Version&lt;/a> you are going to download is compatible with UniVRM.&lt;/p>
&lt;h2 id="create-an-empty-project-in-unity">Create an empty project in Unity&lt;/h2>
&lt;p>Launch Unity and create a new project (&lt;code>New -&amp;gt; Create project&lt;/code>):&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;p>For Unity Hub, click &lt;code>Projects -&amp;gt; New -&amp;gt; 3D template -&amp;gt; CREATE&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project_en.jpg" />
&lt;h2 id="import-univrm-package-into-the-created-project">Import UniVRM package into the created project&lt;/h2>
&lt;p>Import the downloaded &lt;code>UniVRM-0.XX.0_YYYY.unitypackage&lt;/code> into the current project (&lt;code>Assets -&amp;gt; Import Package -&amp;gt; Custom Package&lt;/code>). The imported files will be in the folders &lt;code>../Assets/VRM&lt;/code>, &lt;code>../Assets/UniGLTF&lt;/code> and &lt;code>../Assets/VRMShaders&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;p>&lt;strong>To replace UniVRM with a newer version, it is recommended to delete the existing VRM, UniGLTF, VRMShaders and MeshUtility folders (if any) before package import&lt;/strong>.&lt;/p>
&lt;h2 id="check-if-univrm-has-been-imported-successfully">Check if UniVRM has been imported successfully&lt;/h2>
&lt;p>If UniVRM import successes, &lt;code>VRM&lt;/code> menu will be displayed in the menu bar:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>Previous versions:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">If you are using Unity-2018 and the VRM menu does not show up:&lt;/h4>
Go to &lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> and check whether &lt;code>Scripting Runtime Version&lt;/code> is set to &lt;code>.Net4.X equivalent&lt;/code>
&lt;/div>
&lt;h3 id="console">Console&lt;/h3>
&lt;p>The errors occurred in a Unity project can be shown in the Console window:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;p>Click &lt;code>clear&lt;/code> button on the upper-left corner of the Console window and see if any error (message in red) is left in the console. In most of the cases, errors originate from the UniVRM installation failure.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/error_in_console.jpg" alt="clear console" width="500" />
&lt;hr>
&lt;p>If no errors were found, we can proceed to the next step: &lt;a href="https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/">Create VRM from Humanoid 3D Model&lt;/a>&lt;/p>
&lt;h2 id="univrm-manual">UniVRM Manual&lt;/h2>
&lt;p>➡ &lt;a href="https://vrm.dev/en/docs/univrm/install/">Install&lt;/a>&lt;/p></description></item><item><title>Docs: VRM Import</title><link>https://vrm.dev/en/docs/univrm/import/univrm_import/</link><pubDate>Mon, 12 Oct 2020 15:19:15 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/import/univrm_import/</guid><description>
&lt;h2 id="import-vrm-file-in-editor-mode">Import VRM file in Editor Mode&lt;/h2>
&lt;h3 id="1-create-an-empty-project-in-unity">1. Create an empty project in Unity&lt;/h3>
&lt;p>Launch Unity and create a new project (&lt;code>New -&amp;gt; Create project&lt;/code>):&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/unity_new_project.png" />
&lt;hr>
&lt;p>For Unity Hub, click &lt;code>Projects -&amp;gt; New -&amp;gt; 3D template -&amp;gt; CREATE&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/new_project_en.jpg" />
&lt;hr>
&lt;h3 id="2-import-univrm-package-into-the-created-project">2. Import UniVRM package into the created project&lt;/h3>
&lt;p>Download the latest unitypackage (UniVRM-0.XX) from &lt;a href="https://github.com/vrm-c/UniVRM/releases">UniVRM/releases&lt;/a> and import it into the current project (&lt;code>Assets -&amp;gt; Import Package -&amp;gt; Custom Package&lt;/code>). The imported files will be in &lt;code>../Assets/VRM&lt;/code>, &lt;code>../Assets/UniGLTF&lt;/code> and &lt;code>../Assets/VRMShaders&lt;/code>. &lt;strong>To replace UniVRM with a newer version, it is recommended to delete the existing VRM, UniGLTF, VRMShaders and MeshUtility folders (if any) before package import&lt;/strong>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="400" />
&lt;hr>
&lt;h3 id="3-import-vrm-file-into-unity">3. Import VRM file into Unity&lt;/h3>
&lt;p>&lt;strong>Drag and drop a VRM file (~.vrm) into the Assets folder&lt;/strong>. The &lt;strong>prefab&lt;/strong> file associated with the VRM file can be automatically generated.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_prefab_en.png" />
&lt;hr>
&lt;p>Create a new scene by &lt;code>File&lt;/code> - &lt;code>New Scene&lt;/code> or use an existing one, then drag the prefab file to the Hierarchy window. The model can be visualized as shown in the image below:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;hr>
&lt;p>By clicking the prefab&amp;rsquo;s GameObject in &lt;code>Hierarchy&lt;/code>, the VRM model&amp;rsquo;s information will be displayed in the Inspector window. Note that spring bone settings can be found in the GameObject named &lt;code>secondary&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;hr>
&lt;h2 id="related-sections">Related Sections&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/how_to_make_vrm/setup_vrm/#custom-settings-in-vrm">Custom settings in VRM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/export/univrm_export/">VRM Export&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Unity Version</title><link>https://vrm.dev/en/docs/univrm/install/unity_version/</link><pubDate>Wed, 07 Oct 2020 17:19:08 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/install/unity_version/</guid><description>
&lt;h2 id="univrm-0800-">UniVRM-0.80.0 ～&lt;/h2>
&lt;p>We have discontinued support for Unity-2018.4LTS and updated the development version to Unity-2019.4LTS.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Unity Version&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unity-2019.4 LTS&lt;/td>
&lt;td>Current UniVRM development version&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2020.4 LTS&lt;/td>
&lt;td>Current version for UniVRM UPM testing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2021&lt;/td>
&lt;td>Please report any issues to &lt;a href="https://github.com/vrm-c/UniVRM/issues">github&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="univrm-0560--0790">UniVRM-0.56.0 ～ 0.79.0&lt;/h2>
&lt;p>Support &lt;code>Unity-2018.4&lt;/code> and above. &lt;code>Unity-2019.4 LTS&lt;/code> is recommended.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Unity Version&lt;/th>
&lt;th>Compatibility&lt;/th>
&lt;th>Scripting Runtime Version&lt;/th>
&lt;th>UPM&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Unity-2017&lt;/td>
&lt;td>×&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.1&lt;/td>
&lt;td>×&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.2&lt;/td>
&lt;td>×&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.3&lt;/td>
&lt;td>△&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>C#7.3. Probably working. Not confirmed yet&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2018.4 LTS&lt;/td>
&lt;td>◎&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>Current UniVRM development version&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.1&lt;/td>
&lt;td>○&lt;/td>
&lt;td>.Net4.X equivalent&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.2&lt;/td>
&lt;td>○&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>.Net3.5 is removed. There is no need to set &lt;code>Scripting Runtime Version&lt;/code> to .Net4.X equivalent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.3&lt;/td>
&lt;td>○&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Support UPM from 2019.3.4f1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2019.4 LTS&lt;/td>
&lt;td>◎&lt;/td>
&lt;td>&lt;/td>
&lt;td>○&lt;/td>
&lt;td>Current version for UniVRM-0.XX UPM testing&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unity-2020&lt;/td>
&lt;td>○&lt;/td>
&lt;td>&lt;/td>
&lt;td>○&lt;/td>
&lt;td>Fixed Prefab behaviors, etc. in &lt;code>UniVRM-0.69.0&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="-univrm-055">～ UniVRM-0.55&lt;/h2>
&lt;ul>
&lt;li>Support &lt;code>Unity-5.6&lt;/code> and above&lt;/li>
&lt;/ul></description></item><item><title>Docs: UniUnlit</title><link>https://vrm.dev/en/docs/univrm/shaders/univrm_unlit/</link><pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/en/docs/univrm/shaders/univrm_unlit/</guid><description>
&lt;p>Probably &lt;code>UnLighting&lt;/code> for short &lt;code>Unlit&lt;/code>&lt;/p>
&lt;h2 id="unlit">Unlit&lt;/h2>
&lt;p>It is saved as a glTF &lt;a href="https://github.com/KhronosGroup/glTF/tree/main/extensions/2.0/Khronos/KHR_materials_unlit">KHR_materials_unlit&lt;/a> extension.&lt;/p>
&lt;h2 id="shaders-that-can-be-exported-as-unlit-in-unity">Shaders that can be exported as Unlit in Unity&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Function&lt;/th>
&lt;th>color&lt;/th>
&lt;th>texture&lt;/th>
&lt;th>vertex_color&lt;/th>
&lt;th>alpha / cutout&lt;/th>
&lt;th>no culling&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>glTF&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UniGLTF / UniUnlit&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>✅&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit / Color&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit / Texture&lt;/td>
&lt;td>&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit / Transparent&lt;/td>
&lt;td>&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&lt;/td>
&lt;td>blend&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unlit / Transparent Cutout&lt;/td>
&lt;td>&lt;/td>
&lt;td>✅&lt;/td>
&lt;td>&lt;/td>
&lt;td>cutout&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">vertex color&lt;/h4>
&lt;p>Only &lt;code>UniGLTF / UniUnlit&lt;/code> supports vertex colors.&lt;/p>
&lt;ul>
&lt;li>Mesh contains vertex colors&lt;/li>
&lt;li>Material is a &lt;code>Unlit&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>In some cases, importing will apply the vertex color.
If you apply Unity&amp;rsquo;s &lt;code>unlit&lt;/code> system material to a model that does not require vertex color and export it,
The next time you import, the colors may change unintentionally.
In this case, you can export &lt;code>Mesh&lt;/code> without vertex colors by enabling&lt;code> RemoveVertexColor&lt;/code> at the time of export.&lt;/p>
&lt;/div></description></item><item><title>Docs: BlendShape Setting</title><link>https://vrm.dev/en/docs/univrm/blendshape/univrm_blendshape/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/blendshape/univrm_blendshape/</guid><description>
&lt;p>New features introduced in UniVRM v0.45:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/blendshape/blendshape_setup/">BlendShape setting in Inspector&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/blendshape/univrm_bake_blendshape/">Bake BlendShape state&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="vrmblendshapeproxy">VRMBlendShapeProxy&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxy.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The figure above is VRMBlendShapeProxy in the Inspector window at runtime. VRMBlendShapeProxy can be enabled by clicking the play button in edit mode&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>How to use:&lt;/p>
&lt;ul>
&lt;li>Set BlendShapeAvatar &lt;code>VRMBlendShapeProxy-&amp;gt;BlendShapeAvatar&lt;/code> in the Inspector&lt;/li>
&lt;li>Change BlendShapeClip value between 0 and 1 at runtime (e.g. BLINK, JOY)&lt;/li>
&lt;/ul>
&lt;h2 id="blendshapeavatar">BlendShapeAvatar&lt;/h2>
&lt;p>Expressions can be created in the Inspector.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyEditor.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Double click the&lt;code>Blend Shape Avatar&lt;/code>field&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>or&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeAvatarAsset.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Click&lt;code>BlendShape&lt;/code>directly in the Project view&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeAvatarEditor.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The Inspector of BlendShape editor&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Select expressions and customize the values.
For example, we select&lt;code>Fun&lt;/code>and edit its expressions as shown in the following:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClip.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Example: Set&lt;code>mouth_smile&lt;/code>,&lt;code>eye_smile&lt;/code>and&lt;code>eyeblow_smile&lt;/code>to 100&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The individual blend shapes such as eyebrow, eye and mouth can be merged into one expression like the image above. Created BlendShape names can be specified.&lt;/p>
&lt;p>After changing slider value and creating BlendShape, click the Apply button for saving the current status.&lt;/p>
&lt;h2 id="blendshape-preset">BlendShape preset&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShape_Preset.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Select&lt;code>Preset&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>The predefined names for the BlendShape clips. The following predefined expressions are available:&lt;/p>
&lt;h3 id="neutral">NEUTRAL&lt;/h3>
&lt;p>Specified as the standard facial expression and assumed to be used in standby state.&lt;/p>
&lt;h3 id="a-i-u-e-o">A, I, U, E, O&lt;/h3>
&lt;p>Corresponds to the sound of lip-sync&lt;code>aa・ih・ou・E・oh&lt;/code>.&lt;/p>
&lt;h3 id="blink">Blink&lt;/h3>
&lt;p>Eye blink.&lt;/p>
&lt;h3 id="blink_l-blink_r">Blink_L, Blink_R&lt;/h3>
&lt;p>Blinks with only one eye.&lt;/p>
&lt;h3 id="joy-angry-sorrow-fun">Joy, Angry, Sorrow, Fun&lt;/h3>
&lt;p>Emotion.&lt;/p>
&lt;h3 id="lookup-lookdown-lookleft-lookright">LookUp, LookDown, LookLeft, LookRight&lt;/h3>
&lt;p>Used when the model&amp;rsquo;s eyes are controlled by BlendShape.&lt;/p>
&lt;h3 id="unknown">Unknown&lt;/h3>
&lt;p>New created expressions are specified as &amp;ldquo;Unknown&amp;rdquo;.&lt;/p>
&lt;h2 id="change-the-value-of-blendshapeproxy-at-runtime">Change the value of BlendShapeProxy (at runtime)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyRuntime.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Preset&lt;/code>is used&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can operate expressions from the Inspector.&lt;/p>
&lt;h2 id="option-add-additional-facial-expressions">[Option] Add additional facial expressions&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMBlendShapeProxyRuntime.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Double click the&lt;code>Blend Shape Avatar&lt;/code>field and click&lt;code>Add BlendShapeClip&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Enter a name for the new BlendShapeClip file (BlendShapeClipName.asset) and save it. Then, select the new generated button in the BlendShapeClip list (the last button) and enter a name. Also, please set facial expression values for new BlendShape clips.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClipOption.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Click the new expression &amp;ldquo;びっくり&amp;rdquo; (surprised)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>You can call it from the codes shown as follows:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-cs" data-lang="cs">&lt;span style="color:#09f;font-style:italic">// Call this expression with string since it belongs to unknown category
&lt;/span>&lt;span style="color:#09f;font-style:italic">&lt;/span>proxy.ImmediatelySetValue(&lt;span style="color:#c30">&amp;#34;びっくり&amp;#34;&lt;/span>, &lt;span style="color:#f60">1.0f&lt;/span>); &lt;span style="color:#09f;font-style:italic">// Assign a value between the range 0~1
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>After the setting is done, don&amp;rsquo;t forget to export VRM file for being able to use the created expressions at runtime.&lt;/p>
&lt;h2 id="option-morph-material-color">[Option] Morph material color&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeClipMaterial.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The setting of Material morph. Double click the&lt;code>Current clip&lt;/code>field or directly select the BlendShape clip (e.g. BlendShape.XXX or your created name) in the Project view&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Eye Control</title><link>https://vrm.dev/en/docs/univrm/lookat/univrm_lookat/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/lookat/univrm_lookat/</guid><description>
&lt;p>To control the eye, the relative rotation (Yaw, Pitch) between the VRM model&amp;rsquo;s head and the LookAt target is calculated and then applied to the eye.&lt;/p>
&lt;p>There are two types of eye control settings:&lt;/p>
&lt;ul>
&lt;li>&lt;code>VRMLookAtHead&lt;/code> + &lt;code>VRMLookAtBoneApplyer&lt;/code> components&lt;/li>
&lt;li>&lt;code>VRMLookAtHead&lt;/code> + &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> components&lt;/li>
&lt;/ul>
&lt;h2 id="lookat-type">LookAt Type&lt;/h2>
&lt;p>There are three ways to apply Yaw and Pitch angles relative to LookAt target.
Please set up one of them listed in the followings based on the format of your model:&lt;/p>
&lt;h3 id="bone">Bone&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/en/docs/univrm/lookat/lookat_bone/">eye movement controlled by Eye Bone&lt;/a>&lt;/p>
&lt;h3 id="blendshape">BlendShape&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/en/docs/univrm/lookat/lookat_blendshape/">eye movement controlled by BlendShape vertices&lt;/a>&lt;/p>
&lt;h3 id="textureuv">TextureUV&lt;/h3>
&lt;p>&lt;a href="https://vrm.dev/en/docs/univrm/lookat/lookat_uv/">eye movement controlled by &lt;code>UV Offset&lt;/code> of the eye&amp;rsquo;s texture&lt;/a>&lt;/p>
&lt;h2 id="vrmlookathead">VRMLookAtHead&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMLookAtHead.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMLookAtHead&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>This component calculates the direction from the model&amp;rsquo;s head to the target.&lt;/p>
&lt;h3 id="target">Target&lt;/h3>
&lt;blockquote>
&lt;p>This is the setting for Application, not for VRM model setup&lt;/p>
&lt;/blockquote>
&lt;p>The target to be tracked by the model&amp;rsquo;s eyes. If a camera is set as Target, the model will always look at the camera.&lt;/p>
&lt;h2 id="viewpoint-position">Viewpoint Position&lt;/h2>
&lt;p>The viewpoint position is obtained by &lt;code>HeadBonePosition&lt;/code> + &lt;code>FirstPersonOffset&lt;/code>&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/firstperson.png" /></description></item><item><title>Docs: Model Information</title><link>https://vrm.dev/en/docs/univrm/meta/univrm_meta/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/meta/univrm_meta/</guid><description>
&lt;h2 id="vrmmeta">VRMMeta&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/meta_new.jpg" alt="meta" width="800" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMMeta component&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="information">Information&lt;/h3>
&lt;h4 id="title">Title&lt;/h4>
&lt;p>The name of the avatar model.&lt;/p>
&lt;h4 id="author">Author&lt;/h4>
&lt;p>The author name (not limited to one). Putting avatar creator/first author name at the beginning is recommended.&lt;/p>
&lt;h4 id="contact-information">Contact Information&lt;/h4>
&lt;p>The contact information of the first author.&lt;/p>
&lt;h4 id="reference">Reference&lt;/h4>
&lt;p>The original/related work(s) of the avatar (URL), if any.&lt;/p>
&lt;h4 id="thumbnail">Thumbnail&lt;/h4>
&lt;p>The index to access the thumbnail image of the avatar model in gltf.images. The texture resolution of 2048x2048 is recommended. This is for the application to use as an icon.&lt;/p>
&lt;h4 id="version">Version&lt;/h4>
&lt;p>The version that creates the model.&lt;/p>
&lt;h3 id="license">License&lt;/h3>
&lt;h4 id="personation--characterization-permission">Personation / Characterization Permission&lt;/h4>
&lt;h5 id="a-person-who-can-perform-with-this-avatar">A person who can perform with this avatar&lt;/h5>
&lt;ul>
&lt;li>The avatar may only be manipulated by its creator&lt;/li>
&lt;li>Authorized only to explicitly specified person&lt;/li>
&lt;li>Authorized to anyone&lt;/li>
&lt;/ul>
&lt;h5 id="permission-to-perform-violent-acts-with-this-avatar">Permission to perform violent acts with this avatar&lt;/h5>
&lt;ul>
&lt;li>Disallow&lt;/li>
&lt;li>Allow&lt;/li>
&lt;/ul>
&lt;h5 id="permission-to-perform-sexual-acts-with-this-avatar">Permission to perform sexual acts with this avatar&lt;/h5>
&lt;ul>
&lt;li>Disallow&lt;/li>
&lt;li>Allow&lt;/li>
&lt;/ul>
&lt;h5 id="for-commercial-use">For commercial use&lt;/h5>
&lt;ul>
&lt;li>Disallow&lt;/li>
&lt;li>Allow&lt;/li>
&lt;/ul>
&lt;h5 id="other-license-url">Other License Url&lt;/h5>
&lt;p>The URL links of license with regard to other permissions.&lt;/p>
&lt;h4 id="redistribution--modifications-license">Redistribution / Modifications License&lt;/h4>
&lt;h5 id="license-type">License Type&lt;/h5>
&lt;ul>
&lt;li>Redistribution Prohibited&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/publicdomain/zero/1.0/deed.ja">Copyright wavier(CC0)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by/4.0/deed.ja">Creative Commons CC BY License(CC_BY)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/deed.ja">Creative Commons CC BY NC License(CC_BY_NC)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-sa/4.0/deed.ja">Creative Commons CC BY SA License(CC_BY_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/deed.ja">Creative Commons CC BY NC SA License(CC_BY_NC_SA)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nd/4.0/deed.ja">Creative Commons CC BY ND License(CC_BY_ND)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://creativecommons.org/licenses/by-nc-nd/4.0/deed.ja">Creative Commons CC BY NC ND License(CC_BY_NC_ND)&lt;/a>&lt;/li>
&lt;li>Other&lt;/li>
&lt;/ul>
&lt;h5 id="other-license-url-1">Other License Url&lt;/h5>
&lt;p>The URL links of license with regard to other permissions.&lt;/p></description></item><item><title>Docs: Create Base VRM Model</title><link>https://vrm.dev/en/docs/univrm/humanoid/base_model/</link><pubDate>Wed, 14 Oct 2020 17:46:52 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/humanoid/base_model/</guid><description>
&lt;p>The target &lt;code>GameObject&lt;/code> can be exported as VRM if the following two conditions are fulfilled:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Animator&lt;/code> component is attached&lt;/li>
&lt;li>&lt;code>Animator's HumanoidAvatar&lt;/code> is set up&lt;/li>
&lt;/ul>
&lt;h2 id="fbx">FBX&lt;/h2>
&lt;p>To meet the conditions described above for an imported fbx, set the fbx model as &lt;code>humanoid&lt;/code> from &lt;code>Import Settings -&amp;gt; Rig -&amp;gt; Animation Type&lt;/code>.
After &lt;code>humanoid&lt;/code> type is applied, &lt;code>Animator&lt;/code> component with &lt;code>HumanoidAvatar&lt;/code> will be attached to the fbx&amp;rsquo;s prefab.&lt;/p>
&lt;p>To convert the fbx model to &lt;code>humanoid&lt;/code> type successfully:&lt;/p>
&lt;ul>
&lt;li>All &lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.md#defined-bones">required bones&lt;/a> are included&lt;/li>
&lt;li>Bones&amp;rsquo; parent-child relationships are correct (e.g. hips -&amp;gt; leg -&amp;gt; foot. not the other way around).&lt;/li>
&lt;/ul>
&lt;p>No restrictions on bone naming.&lt;/p>
&lt;h2 id="modify-fbx-in-the-scene">Modify FBX in the scene&lt;/h2>
&lt;p>You can modify fbx&amp;rsquo;s GameObject by&lt;/p>
&lt;ul>
&lt;li>adding children GameObjects to Parent GameObjects&lt;/li>
&lt;li>disabling GameObjects&lt;/li>
&lt;/ul>
&lt;p>If you want to change the hierarchy structure, please refer to &lt;code>HumanoidComponent&lt;/code>, which is described in the next section.&lt;/p>
&lt;h2 id="create-humanoidavatar-manually-from-gameobject">Create HumanoidAvatar manually from GameObject&lt;/h2>
&lt;p>&lt;code>HumanoidAvatar&lt;/code> can be created without using &lt;code>fbx importer&lt;/code>.
Check out &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/">Humanoid Component&lt;/a> for more details.&lt;/p>
&lt;p>If the following types of models are in the scene:&lt;/p>
&lt;ul>
&lt;li>Humanoid model in GLTF format&lt;/li>
&lt;li>Humanoid-like model made by cubes and so on&lt;/li>
&lt;/ul>
&lt;p>The &lt;code>HumanoidAvatar&lt;/code> can be created as long as each required bone is assigned accordingly based on the object in Hierarchy.
Finally, to export the target &lt;code>GameObject&lt;/code> as VRM, attach &lt;code>Animator&lt;/code> component and assign the created &lt;code>HumanoidAvatar&lt;/code> to &lt;code>Avatar&lt;/code> field.&lt;/p></description></item><item><title>Docs: BlendShape Setup (v0.45)</title><link>https://vrm.dev/en/docs/univrm/blendshape/blendshape_setup/</link><pubDate>Tue, 15 Sep 2020 20:06:14 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/blendshape/blendshape_setup/</guid><description>
&lt;h2 id="assets-related-to-blendshape">Assets related to BlendShape&lt;/h2>
&lt;p>Once a VRM file is imported, BlendShapeClips (Preset) will be in a folder like this: &lt;code>ModelName.BlendShapes&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshapeclip_assets.png" alt="image">&lt;/p>
&lt;p>BlendShapeAvatar Asset&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshapeavatar.png" alt="image">&lt;/p>
&lt;h2 id="setting-screen">Setting screen&lt;/h2>
&lt;p>The Asset has the following setting screens:&lt;/p>
&lt;h3 id="the-inspector-of-blendshapeavatar-asset">The Inspector of BlendShapeAvatar Asset&lt;/h3>
&lt;h4 id="editor-tab">Editor tab&lt;/h4>
&lt;p>BlendShapeClip Selection / Creation&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeavatar.png" alt="image">&lt;/p>
&lt;h4 id="list-tab-starting-from-v045">List tab (Starting from v0.45)&lt;/h4>
&lt;p>BlendShapeClip List&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/list.png" alt="image">&lt;/p>
&lt;h3 id="the-inspector-of-blendshapeclip-asset">The Inspector of BlendShapeClip Asset&lt;/h3>
&lt;h4 id="blendshape-tab">BlendShape tab&lt;/h4>
&lt;p>Create the BlendShape setting:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/alicia_binary.png" alt="image">&lt;/p>
&lt;h4 id="blendshape-list-tab">BlendShape List tab&lt;/h4>
&lt;p>You can see the values created from the BlendShape tab.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_angry.png" alt="image">&lt;/p>
&lt;h4 id="material-list-tab">Material List tab&lt;/h4>
&lt;p>You can create a &lt;a href="https://vrm.dev/en/docs/univrm/lookat/lookat_blendshape/">BlendShape version of LookAt&lt;/a>, change the color with BlendShape, etc.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/material_color.png" alt="image">&lt;/p>
&lt;h2 id="blendshapeclip-settings">BlendShapeClip Settings&lt;/h2>
&lt;p>Create a facial expression for a BlendShapeClip (not limited to the face).&lt;/p>
&lt;h3 id="1-select-a-blendshapeclip">1. Select a BlendShapeClip&lt;/h3>
&lt;p>Select a BlendShapeClip from the Inspector of BlendShapeAvatar&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeavatar.png" alt="image">&lt;/p>
&lt;p>Or click a BlendShapeClip Asset directly in the Project window&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/select_blendshapeclip.png" alt="image">&lt;/p>
&lt;h3 id="2-change-the-values-of-the-sliders-to-make-a-facial-expression">2. Change the values of the sliders to make a facial expression&lt;/h3>
&lt;p>The names of the existing &lt;code>SkinnedMeshRenderers&lt;/code> will list in the Inspector window once you click the BlendShape tab.
Click any listed name and you can then adjust the BlendShape value.
The change value is reflected immediately.
The &lt;code>Apply&lt;/code> button is removed starting from v0.45.&lt;/p>
&lt;h3 id="3-check-the-models-blendshape-in-preview">3. Check the model&amp;rsquo;s BlendShape in Preview&lt;/h3>
&lt;p>You can test changes in BlendShape by sliding the value (&lt;code>Preview Weight Slider&lt;/code>) between 0 ~ 1&lt;/p>
&lt;p>Click and drag the &lt;code>left / right&lt;/code> mouse button to change the viewing perspective&lt;/p>
&lt;p>Click and drag the &lt;code>middle&lt;/code> mouse button to move horizontally / vertically&lt;/p>
&lt;h3 id="the-binary-value-setting-for-blendshape-v045">The Binary value setting for BlendShape (v0.45)&lt;/h3>
&lt;p>The Binary option is added into the BlendShape setting in v0.45. It is for users who don&amp;rsquo;t want to display the middle state of the BlendShape. The target value will be automatically rounded off. A BlendShape with the binary setting being active will only have a representative expression like a screenshot.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/alicia_binary.png" alt="image">&lt;/p>
&lt;p>This feature will become effective when a v0.45-installed application is loaded&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/binary.png" alt="image">&lt;/p></description></item><item><title>Docs: 1. Create VRM from Humanoid 3D Models</title><link>https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/</link><pubDate>Tue, 25 Aug 2020 17:10:30 +0900</pubDate><guid>https://vrm.dev/en/how_to_make_vrm/convert_from_humanoid_model/</guid><description>
&lt;p>After the UniVRM package is &lt;a href="https://vrm.dev/en/docs/vrm/how_to_make_vrm/setup_unity/">installed&lt;/a> successfully, we can start converting the humanoid 3D model to VRM.&lt;/p>
&lt;h2 id="prepare-a-3d-model-that-can-be-handled-as-humanoid-in-unity">Prepare a 3D model that can be handled as &amp;ldquo;Humanoid&amp;rdquo; in Unity&lt;/h2>
&lt;p>First prepare &lt;strong>a 3D model made by your own or allowed to be modified for use as VR avatar. As there are &lt;a href="https://vrm.dev/en/docs/vrm/vrm_meta/">license settings&lt;/a> embedded in VRM file, users need to set them up according to Author&amp;rsquo;s (yourself or others) permission usage.&lt;/strong>&lt;/p>
&lt;p>Then, ensure the &lt;a href="https://github.com/vrm-c/vrm-specification/blob/master/specification/0.0/README.md#defined-bones">required bones&lt;/a> are included so that the model can be recognized as &lt;code>Humanoid&lt;/code>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Base VRM Model&lt;/h4>
The conditions for creating a VRM model &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/base_model/">can be found here&lt;/a>
&lt;/div>
&lt;h2 id="import-a-fbx-model-into-unity">Import a FBX model into Unity&lt;/h2>
&lt;p>Here we use &lt;a href="https://3d.nicovideo.jp/works/td14712">Alicia Solid&lt;/a> as an example.
First, Drag and drop the FBX folder into the &lt;code>Assets&lt;/code> folder:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/fbx_folder.jpg" />
&lt;hr>
&lt;p>In the Project window, click blue icon (Alicia_Solid_Unity), which is fbx&amp;rsquo;s asset (prefab):&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/assets_fbx.jpg" />
&lt;h2 id="fbxs-material-setup">FBX&amp;rsquo;s Material Setup&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/fbx_default.jpg" />
&lt;hr>
&lt;p>As shown in the image above, by default FBX&amp;rsquo;s materials are set as &lt;code>Standard&lt;/code> shader with default parameters. For the demonstration of VRM conversion under the minimum material setup, we set the material&amp;rsquo;s &lt;code>Shader&lt;/code> to &lt;code>MToon&lt;/code> and &lt;code>Color&lt;/code> to white.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Shader&lt;/h4>
VRM supports three types of shaders: &lt;a href="https://vrm.dev/en/docs/univrm/shaders/shader_mtoon/">MToon&lt;/a>, &lt;a href="https://vrm.dev/en/docs/univrm/shaders/univrm_unlit/">Unlit&lt;/a> and &lt;a href="https://vrm.dev/en/docs/univrm/shaders/univrm_standard/">Standard&lt;/a>
&lt;/div>
&lt;p>Create a folder (e.g. name the folder as &lt;code>Materials&lt;/code>) in FBX folder (&lt;code>/Assets/FBX/Materials&lt;/code>). In FBX&amp;rsquo;s Inspector window, click &lt;code>Materials&lt;/code> -&amp;gt; &lt;code>Extract Materials&lt;/code> and save extracted materials into &lt;code>Materials&lt;/code> folder. If the reference for each material has been assigned in &lt;code>On Demand Remap&lt;/code> section, skip this step. Another way to set up materials is by setting &lt;code>Location&lt;/code> as &lt;code>Use External Materials (Legacy)&lt;/code>. Here we only focus on the former one.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/extract_materials.jpg" alt="extract_materials" width="900" />
&lt;hr>
&lt;p>The result should look like this:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/material_folder.jpg" alt="material_folder" />
&lt;hr>
&lt;p>Next, select all materials and set &lt;code>Shader&lt;/code> to &lt;code>VRM&lt;/code> -&amp;gt; &lt;code>MToon&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/change_to_mtoon.jpg" alt="change_to_mtoon" />
&lt;hr>
&lt;p>Change &lt;code>Shade Color&lt;/code> to white:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/shade_color_to_white.jpg" alt="shade_color_to_white" />
&lt;hr>
&lt;img src="https://vrm.dev/images/vrm/alicia_preview.jpg" />
&lt;hr>
&lt;p>For more details about how to set up &lt;code>MToon&lt;/code> shader, refer to &lt;a href="https://vrm.dev/en/docs/univrm/shaders/shader_mtoon/">MToon settings&lt;/a>.&lt;/p>
&lt;h2 id="humanoid-setup">Humanoid Setup&lt;/h2>
&lt;p>Originally the &lt;code>Animation Type&lt;/code> for FBX is &lt;code>generic&lt;/code>. Now we need to set it to &lt;code>Humanoid&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/rig_generic.jpg" />
&lt;hr>
&lt;p>Change to &lt;code>Humanoid&lt;/code> and click &lt;code>Apply&lt;/code> button:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/humanoid_apply.jpg" alt="humanoid_apply" width="900" />
&lt;hr>
&lt;p>Next, click &lt;code>Configure&lt;/code> button to configure your model. A message box will pop up asking whether you want to save the current scene. Click &lt;code>Save&lt;/code> to save it.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/SetModelAsHumanoid.png" alt="SetModelAsHumanoid" width="900" />
&lt;hr>
&lt;p>Now you will see the bone mapping details for this model. Unity will perform auto-mapping for each bone initially. You can check the model&amp;rsquo;s Body, Head, etc. if an assigned component fits, the leftmost icon will show as green, otherwise it will show as red. In this situation, click rightmost icon for a bone that has the failure bone mapping and select a component you think it fits this bone. To re-map the bones automatically, simply click &lt;code>Mapping&lt;/code> in the lowerleft of the interface, click &lt;code>clear&lt;/code> and then click &lt;code>Automap&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/BoneMapping.png" alt="BoneMapping" width="600" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/BoneAssignment.png" alt="BoneAssignment" width="900" />
&lt;/p>
&lt;p>However, in some cases the bone mapping results are not reasonable even all of them appear as green as shown in the figure below:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/fix_eye.png" />
&lt;hr>
&lt;p>We can see the Jaw and Eyes are assigned by the wrong components. As mentioned above, we can fix them by assigning the right corresponding components manually (e.g. eye_light_L will be replaced with eye_L). If the bone mappings are all right, click &lt;code>Done&lt;/code> button to proceed to the next step.&lt;/p>
&lt;h2 id="put-prefab-into-the-scene">Put Prefab into the Scene&lt;/h2>
&lt;p>Drag the prefab from the Project window to the Hierarchy window.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/DragImportedModel.png" alt="DragImported3DModel" width="300" />
&lt;hr>
&lt;p>Now click the model in the Hierarchy window and check its position, rotation and scale:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/initial_position_rotation.jpg" alt="initial_position_rotation" width="800" />
&lt;hr>
&lt;ul>
&lt;li>Model Position
&lt;ul>
&lt;li>The model should be placed at the origin&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model Pose
&lt;ul>
&lt;li>The model should face towards +Z(axis) direction&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Model Scale
&lt;ul>
&lt;li>1.0 = 1m&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="check-fbxs-blendshape-normal">Check FBX&amp;rsquo;s BlendShape Normal&lt;/h2>
&lt;p>Check whether the imported fbx has the correct BlendShape normals. The details &lt;a href="https://vrm.dev/en/docs/univrm/blendshape/check_blendshape_normal/">can be found here&lt;/a>.&lt;/p>
&lt;h2 id="export-the-model-as-vrm-from-menu">Export the model as VRM from menu&lt;/h2>
&lt;p>Select the model GameObject in &lt;code>Hierarchy&lt;/code> window and export it from &lt;code>VRM0 -&amp;gt; Export UniVRM-0.XX&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;hr>
&lt;p>Previous versions: &lt;code>VRM -&amp;gt; UniVRM-0.XX -&amp;gt; Export humanoid&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;hr>
&lt;p>&lt;a href="https://vrm.dev/en/docs/univrm/export/univrm_export/">Export dialog&lt;/a>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/export_dialog_title_version_author_en.jpg" alt="export_dialog_title_version_author_en" width="900" />
&lt;hr>
&lt;p>Fill out required fields to resolve error messages displayed on the dialog. Also, don&amp;rsquo;t forget to enter license information about this model.
If all red messages are gone, click &lt;code>Export&lt;/code> button to export the model. To easily track this file, it is recommended to name the file like this: &amp;ldquo;Model_Name_Normalized.vrm&amp;rdquo;. The file can be saved inside/outside the &lt;code>Assets&lt;/code> folder. If the file is saved inside the &lt;code>Assets&lt;/code> folder, its prefab file will be automatically generated.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Error Messages&lt;/h4>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/export062_empty_en.jpg" alt="vrm export" width="600" />&lt;/p>
&lt;p>Before exporting as VRM, validation checks on each component in the model will be conducted:&lt;/p>
&lt;ul>
&lt;li>The error messages (red) need to be resolved&lt;/li>
&lt;li>The warning messages (yellow) can be ignored if you want to export VRM straight away&lt;/li>
&lt;/ul>
&lt;p>For example, if ExportRoot is not valid, the error messages will be displayed on the dialog. See &lt;a href="https://vrm.dev/en/docs/univrm/export/univrm_export/#conditions-for-valid-exportroot">Conditions for Valid ExportRoot&lt;/a> for more information.&lt;/p>
&lt;/div>
&lt;h2 id="export-options">Export Options&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_options_en.jpg" width="900" />
&lt;hr>
&lt;p>If the model is not in &lt;a href="https://vrm.dev/en/docs/univrm/humanoid/humanoid_overview/#t-pose">T-Pose&lt;/a>, click &lt;code>Make T-Pose&lt;/code> to make one.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Pose Freeze&lt;/h4>
&lt;code>Pose Freeze&lt;/code> is for model normalization during export. The exporter will automatically check whether the export target needs to be normalized.
For instance, in Hierarchy if a mesh&amp;rsquo;s rotation or scale is not Default (first VRM export), the model normalization needs to be performed.
&lt;/div>
&lt;p>Related sections about UniVRM export:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/export/vrm_size/">VRM Size (BlendShape size reduction)&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In the next section, we will introduce how to &lt;a href="https://vrm.dev/en/how_to_make_vrm/setup_vrm/">import and set up VRM file first time&lt;/a>.&lt;/p>
&lt;h2 id="online-resources">Online Resources&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=i2pOourRdFU">From Blender to VRM: Prepare your own Vtuber Model&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: LookAt(Bone)</title><link>https://vrm.dev/en/docs/univrm/lookat/lookat_bone/</link><pubDate>Thu, 06 Aug 2020 11:25:13 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/lookat/lookat_bone/</guid><description>
&lt;p>&lt;code>LookAt Bone&lt;/code> requires &lt;code>VRMLookAtHead&lt;/code> and &lt;code>VRMLookAtBoneApplyer&lt;/code> components.&lt;/p>
&lt;h2 id="control-the-eye-gaze-with-bone-vrmlookatboneapplyer">Control the Eye Gaze with bone: VRMLookAtBoneApplyer&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMLookAtBoneApplyer.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>VRMLookAtBoneApplyer&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Apply the parameters of the calculated eye gaze direction of &lt;code>VRMLookAtHead&lt;/code> to EyeBone.&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;ul>
&lt;li>yaw, pitch maximum angle =&amp;gt; &lt;code>Curve X Range Degree&lt;/code>&lt;/li>
&lt;li>eye bone&amp;rsquo;s rotation angle when yaw, pitch angle is at maximum =&amp;gt; &lt;code>Curve Y Range Degree&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Please set up &lt;code>VerticalDown&lt;/code>, &lt;code>VerticalUp&lt;/code>, &lt;code>HorizontalOuter&lt;/code>, &lt;code>HorizontalInner&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>HorizontalOuter: The movable range of horizontal outward direction&lt;/li>
&lt;li>HorizontalInner: The movable range of horizontal inward direction&lt;/li>
&lt;li>VerticalDown: The movable range of vertical downward direction&lt;/li>
&lt;li>VerticalUp: The movable range of vertical upward direction&lt;/li>
&lt;/ul></description></item><item><title>Docs: VRM Export</title><link>https://vrm.dev/en/docs/univrm/export/univrm_export/</link><pubDate>Thu, 16 Jul 2020 10:23:04 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/export/univrm_export/</guid><description>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Terminology&lt;/th>
&lt;th>Meaning&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Root&lt;/td>
&lt;td>Topmost parent of an object&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Hierarchy&lt;/td>
&lt;td>Root and its children&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="v058">v0.58~&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_dialog.jpg" alt="vrm export" width="900" />
&lt;p>The export dialog is based on Unity&amp;rsquo;s &lt;a href="https://docs.unity3d.com/ScriptReference/EditorWindow.html">EditorWindow&lt;/a>&lt;/p>
&lt;h3 id="how-to-use">How to use&lt;/h3>
&lt;h4 id="vrm-exporter-window">VRM Exporter Window&lt;/h4>
&lt;p>Open VRM Exporter Window by &lt;code>VRM0 -&amp;gt; Export UniVRM-0.XX&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>Previous versions: &lt;code>VRM -&amp;gt; UniVRM-0.XX -&amp;gt; Export humanoid&lt;/code>.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;ul>
&lt;li>You can directly pick up exportable target in the Project Window. There is no need to put the Prefab in the scene first.&lt;/li>
&lt;/ul>
&lt;h4 id="export-target-setup">Export Target Setup&lt;/h4>
&lt;ul>
&lt;li>Drag the export target&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export058_drag.gif" alt="vrm export" width="600" />
&lt;ul>
&lt;li>Select the export target in the list&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/export058_select.gif" alt="vrm export" width="600" />
&lt;h4 id="conditions-for-valid-exportroot">Conditions for Valid ExportRoot&lt;/h4>
&lt;img src="https://vrm.dev/images/vrm/export062_empty_en.jpg" alt="vrm export" width="600" />
&lt;p>The setting screen for ExportRoot will show up if the following conditions are satisfied:&lt;/p>
&lt;ul>
&lt;li>Must be topmost parent&lt;/li>
&lt;li>Root&amp;rsquo;s Rotation and Scaling are Default (changing Translation is allowable)&lt;/li>
&lt;li>Has Animator component attached and Animator.avatar is humanoid&lt;/li>
&lt;li>Faces the positive Z-axis (identified by the bone positions of left and right feet)&lt;/li>
&lt;li>Contains active mesh in the Hierarchy&lt;/li>
&lt;/ul>
&lt;h4 id="exporter-interface">Exporter Interface&lt;/h4>
&lt;p>Please set up &lt;code>Meta&lt;/code> and &lt;code>ExportSettings&lt;/code>.
If you get warning messages, it is optional for you to correct those warnings or not.
If there is no error messages shown, you can go ahead and press &lt;code>export&lt;/code> button at the lower right corner of the dialog.
Details about VRM size calculation &lt;a href="https://vrm.dev/en/docs/univrm/export/vrm_size/">can be found here&lt;/a>.&lt;/p>
&lt;h2 id="export-option">Export Option&lt;/h2>
&lt;p>Here is a list of additional processing during export:&lt;/p>
&lt;h3 id="force-t-pose">Force T Pose&lt;/h3>
&lt;p>Force T-Pose before export.
If you can manually make T-Pose for model, it&amp;rsquo;s ok without selecting this option.&lt;/p>
&lt;h3 id="pose-freeze">Pose Freeze&lt;/h3>
&lt;p>Model&amp;rsquo;s normalization.
If Model&amp;rsquo;s normalization is already done, there is no need to perform model normalization again.
However, if additional parts are added into the model (not normalized yet), model normalization is required.
In Hierarchy, all GameObjects&amp;rsquo; rotation should be 0, and their scale should be 1 if a model has been normalized.&lt;/p>
&lt;blockquote>
&lt;p>In v0.58, the system can automatically identify whether the export target needs PoseFreeze&lt;/p>
&lt;/blockquote>
&lt;h3 id="useexperimentalexporter">UseExperimentalExporter&lt;/h3>
&lt;p>Exporter&amp;rsquo;s Serializer version.
It will not affect the output whether this option is selected or not.&lt;/p>
&lt;h3 id="usesparseaccessor">UseSparseAccessor&lt;/h3>
&lt;p>Uses Sparse Accessor feature in GLTF: only records BlendShape vertices with non-zero value.&lt;/p>
&lt;p>If the model contains multiple BlendShapes, enabling this can help reduce the file size.&lt;/p>
&lt;h3 id="onlyblendshapeposition">OnlyBlendshapePosition&lt;/h3>
&lt;p>BlendShape&amp;rsquo;s Normal and Tangent will not be exported if this option is selected.
The file size can be reduced.
Be aware that errors may occur during import if the export target is made by UniVRM-0.53 or earlier versions.&lt;/p>
&lt;h3 id="reduceblendshape">ReduceBlendshape&lt;/h3>
&lt;p>BlendShapes that are not referenced by BlendShapeClips will not be exported.
The file size can be reduced.&lt;/p>
&lt;h3 id="reduceblendshapeclip">ReduceBlendshapeClip&lt;/h3>
&lt;p>BlendShapeClip belonging to Preset.Unknown will not be exported.
Used in combination with ReduceBlendshape.&lt;/p>
&lt;h3 id="removevertexcolor">RemoveVertexColor&lt;/h3>
&lt;p>Vertex color will not be exported.
In GLTF, there is no setting that can disable the color vertex usage.
UniVRM supports vertex color for &lt;code>unlit&lt;/code> shader.&lt;/p>
&lt;h2 id="list-of-error-messages">List of Error Messages&lt;/h2>
&lt;p>Table for Error Messages in v0.56, v0.57 and v0.58&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>message&lt;/th>
&lt;th>0.56&lt;/th>
&lt;th>0.57&lt;/th>
&lt;th>0.58&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The Root translation, rotation and scale will be dropped&lt;/td>
&lt;td>error&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>error (changing translation is OK)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Jaw bone&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Same name bone&lt;/td>
&lt;td>error&lt;/td>
&lt;td>warn (auto-rename)&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Vertex color&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unknown shader&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require source&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require no parent&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>error (new)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require Z+ forward&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>error (new)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require animator&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require humanoid avatar&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Require Title/Version/Author&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>No active mesh&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Prefab export&lt;/td>
&lt;td>error&lt;/td>
&lt;td>error&lt;/td>
&lt;td>ok&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Springbone validation&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>ok&lt;/td>
&lt;td>warn&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="require-source">Require source&lt;/h3>
&lt;p>Please select a valid object that can be exported as VRM file in the scene.&lt;/p>
&lt;h3 id="require-animator">Require animator&lt;/h3>
&lt;p>Animator component cannot be found in Root (non-humanoid).&lt;/p>
&lt;h3 id="require-animatoravatar">Require animator.avatar&lt;/h3>
&lt;p>avatar cannot be found in Root&amp;rsquo;s Animator (non-humanoid).&lt;/p>
&lt;h3 id="animatoravatar-is-not-valid">Animator.avatar is not valid&lt;/h3>
&lt;p>Animator.avatar is not humanoid.&lt;/p>
&lt;h3 id="animatoravatar-is-not-humanoid-please-change-models-animationtype-to-humanoid">Animator.avatar is not humanoid. Please change model&amp;rsquo;s AnimationType to humanoid&lt;/h3>
&lt;p>Please change the setting to &lt;code>humanoid&lt;/code> (from Inspector: &lt;code>FBX Import&lt;/code> -&amp;gt; &lt;code>rig&lt;/code> -&amp;gt; &lt;code>AnimationType&lt;/code>).&lt;/p>
&lt;h3 id="require-title">Require Title&lt;/h3>
&lt;p>Please enter the title of this model in the dialog.&lt;/p>
&lt;h3 id="require-version">Require Version&lt;/h3>
&lt;p>Please enter the version of this model in the dialog.&lt;/p>
&lt;h3 id="require-author">Require Author&lt;/h3>
&lt;p>Please enter the author of this model in the dialog.&lt;/p>
&lt;h3 id="no-active-mesh">No active mesh&lt;/h3>
&lt;p>Export target doesn&amp;rsquo;t have &lt;code>active&lt;/code> mesh.&lt;/p>
&lt;h3 id="filename-0-is-too-long">FileName &amp;lsquo;{0}&amp;rsquo; is too long&lt;/h3>
&lt;p>Material, Texture and Mesh names are too long.
Please rename them.&lt;/p>
&lt;h3 id="the-root-translation-rotation-and-scale-will-be-dropped">The Root translation, rotation and scale will be dropped&lt;/h3>
&lt;p>A model is allowed to export if Root&amp;rsquo;s translation, rotation and scale are not Default values.
However, those values will be lost.
We recommend moving this object in the Hierarchy to be Root&amp;rsquo;s child.&lt;/p>
&lt;h3 id="jaw-bone-is-included-it-may-not-what-you-intended-please-check-the-humanoid-avatar-setting-screen">Jaw bone is included. It may not what you intended. Please check the humanoid avatar setting screen&lt;/h3>
&lt;p>Jaw (chin) bone is included in humanoid setting.
There is a possibility that the jaw bone is automatically assigned during FBX import.
As a result, facial parts (e.g. bangs) are mis-recognized as jaw and being assigned to Jaw bone.
Therefore, bangs will have weird movements due to this issue.
Please remove this setting in Inspector &lt;code>FBX Importer&lt;/code> -&amp;gt; &lt;code>rig&lt;/code>&lt;/p>
&lt;h3 id="there-are-bones-with-the-same-name-in-the-hierarchy-they-will-be-automatically-renamed-after-export">There are bones with the same name in the hierarchy. They will be automatically renamed after export&lt;/h3>
&lt;p>A model is allowed to export if there are bones with the same name in this model.
Only the warning message will be given in Export dialog.
Those bones will be renamed automatically.&lt;/p>
&lt;h3 id="this-model-contains-vertex-color">This model contains vertex color&lt;/h3>
&lt;p>If you see this message, there are meshes that contain vertex color in the Hierarchy.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Vertex Color&lt;/th>
&lt;th>If contained&lt;/th>
&lt;th>Behavior&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Before UniVRM-0.53&lt;/td>
&lt;td>not applied&lt;/td>
&lt;td>ignore vertex color effect&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>From UniVRM-0.54&lt;/td>
&lt;td>applied&lt;/td>
&lt;td>show vertex color effect&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If &lt;code>Unlit&lt;/code> is used, there is no setting that can disable vertex color usage.
If necessary, please choose &lt;code>Remove Vertex Color&lt;/code> option to direct remove vertex color data from the model.&lt;/p>
&lt;h3 id="unknown-material-0-is-used-this-will-export-as-standard-fallback">unknown material &amp;lsquo;{0}&amp;rsquo; is used. this will export as &lt;code>Standard&lt;/code> fallback&lt;/h3>
&lt;p>Materials other than Standard, Unlit, MToon will be defaulted to Standard.&lt;/p>
&lt;h2 id="v057">v0.57&lt;/h2>
&lt;img src="https://vrm.dev/images/vrm/export_dialog_56.jpg" alt="vrm export" width="600" />
&lt;hr>
&lt;p>The export dialog is based on Unity&amp;rsquo;s &lt;a href="https://docs.unity3d.com/ScriptReference/ScriptableWizard.html">ScriptableWizard&lt;/a>.
We will improve it in the later version.&lt;/p></description></item><item><title>Docs: Install UniVRM</title><link>https://vrm.dev/en/docs/univrm/install/univrm_install/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/install/univrm_install/</guid><description>
&lt;h2 id="unity-version">Unity Version&lt;/h2>
&lt;ul>
&lt;li>The recommended version is &lt;code>Unity-2019.4&lt;/code>. Other supported Unity versions &lt;a href="https://vrm.dev/en/docs/univrm/install/unity_version/">can be found here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h2 id="unitypackage">unitypackage&lt;/h2>
&lt;p>Get unity package in &lt;a href="https://github.com/vrm-c/UniVRM/releases">https://github.com/vrm-c/UniVRM/releases&lt;/a>.&lt;/p>
&lt;p>The package&amp;rsquo;s name will look like this: &lt;code>UniVRM-0.XX.X_XXXX.unitypackage&lt;/code>&lt;/p>
&lt;h2 id="before-installation">Before Installation&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Create a new Unity project&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Go to &lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Rendering&lt;/code> - &lt;code>ColorSpace&lt;/code> and set &lt;code>ColorSpace&lt;/code> to &lt;code>Linear&lt;/code> (recommended setting)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/linear_setting.jpg" alt="linear setting" width="600" />
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">If your Unity version is {Unity-2018.3, Unity-2018.4, Unity-2019.1}: &lt;/h4>
&lt;ul>
&lt;li>Go to &lt;code>ProjectSettings&lt;/code> - &lt;code>Player&lt;/code> - &lt;code>Other Settings&lt;/code> - &lt;code>Scripting Runtime Version&lt;/code> and set &lt;code>Scripting Runtime Version&lt;/code> to &lt;code>.Net4.X equivalent&lt;/code>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Install UniVRM in an Existing Project: &lt;/h4>
If old UniVRM version exists, please delete &lt;code>Assets/VRM&lt;/code>, &lt;code>Assets/UniGLTF&lt;/code> (if exists), &lt;code>Assets/VRMShaders&lt;/code> (if exists) and &lt;code>Assets/MeshUtility&lt;/code> (if exists) before installation. Refer to &lt;a href="https://vrm.dev/en/docs/univrm/install/univrm_uninstall/">Uninstall UniVRM&lt;/a> for more information
&lt;/div>
&lt;h2 id="import-unitypackage">Import unitypackage&lt;/h2>
&lt;p>Go to &lt;code>Assets&lt;/code> - &lt;code>Import Package&lt;/code> - &lt;code>Custom Package&lt;/code> and select &lt;code>UniVRM-0.XX.X_XXXX.unitypackage&lt;/code>.&lt;/p>
&lt;p>Three folders: &lt;code>Assets/VRM&lt;/code>, &lt;code>Assets/UniGLTF&lt;/code> and &lt;code>Assets/VRMShaders&lt;/code> will be imported into the Unity project.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/package_import.jpg" alt="package_import" width="350" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Import Unity Package&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="check-if-univrm-has-been-imported-successfully">Check if UniVRM has been imported successfully&lt;/h2>
&lt;p>If UniVRM import successes, &lt;code>VRM&lt;/code> menu will be displayed in the menu bar:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm menu" />
&lt;hr>
&lt;p>Previous versions:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_menu_old.jpg" alt="vrm menu old" />
&lt;hr>
&lt;p>If menu does not show up:&lt;/p>
&lt;ul>
&lt;li>Open Console: click &lt;code>clear&lt;/code> button on the upper-left corner of the Console window to see if any error (message in red) occurs&lt;/li>
&lt;/ul>
&lt;img src="https://vrm.dev/images/vrm/show_console.jpg" alt="show console" width="500" />
&lt;img src="https://vrm.dev/images/vrm/clear_console.jpg" alt="clear console" width="500" />
&lt;h2 id="related-sections">Related Sections&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/how_to_make_vrm/">How to make VRM file&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/import/univrm_import/">VRM Import&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Docs: Humanoid Component</title><link>https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/</link><pubDate>Thu, 15 Oct 2020 18:23:26 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/humanoid/meshutility_humanoid/</guid><description>
&lt;p>&lt;code>UniVRM-0.60.0~&lt;/code>&lt;/p>
&lt;p>A humanoid avatar can be created directly from the Scene without fbx.&lt;/p>
&lt;h1 id="how-to-use">How to use&lt;/h1>
&lt;p>Prepare a rigged model in the scene.&lt;/p>
&lt;p>We will take the model in the following link as an example:&lt;/p>
&lt;p>&lt;a href="https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary">https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/RiggedFigure/glTF-Binary&lt;/a>&lt;/p>
&lt;p>First, import &lt;code>RiggedFigure.glb&lt;/code> into the &lt;code>Assets&lt;/code> folder.
If UniVRM package is installed, the &lt;code>Prefab&lt;/code> file can be automatically generated from the imported &lt;code>glb&lt;/code>.&lt;/p>
&lt;p>Drag the &lt;code>Prefab&lt;/code> file to the &lt;code>Hierarchy&lt;/code> window. A GameObject associated with this &lt;code>Prefab&lt;/code> is instantiated.&lt;/p>
&lt;p>Click on the GameObject in the &lt;code>Hierarchy&lt;/code> window, then add a humanoid component (&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; Humanoid&lt;/code>).&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bone_required.jpg" />
&lt;p>As shown in the image above, assign required bones.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/create_avatar.jpg" />
&lt;p>Press &lt;code>Create UnityEngine.Avatar&lt;/code> button.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/humanoid_animator.jpg" />
&lt;p>Now a humanoid avatar is created. You can make a T-pose for the model and convert it to VRM.&lt;/p></description></item><item><title>Docs: 2. Set up VRM</title><link>https://vrm.dev/en/how_to_make_vrm/setup_vrm/</link><pubDate>Tue, 25 Aug 2020 17:26:05 +0900</pubDate><guid>https://vrm.dev/en/how_to_make_vrm/setup_vrm/</guid><description>
&lt;p>In the previous section, we have introduced how to convert a Humanoid 3D model to VRM.
Now we are going to show how to import and set up a VRM file.&lt;/p>
&lt;h2 id="import-the-vrm-file">Import the VRM file&lt;/h2>
&lt;p>First &lt;strong>drag and drop a VRM file (~.vrm) into the Assets folder&lt;/strong>. The &lt;strong>prefab&lt;/strong> file associated with the VRM file can be automatically generated.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_prefab_en.png" />
&lt;hr>
&lt;p>Click the prefab file (normalized model) and check the inspector window. As seen in the image below, components such as &lt;code>VRMMeta&lt;/code>, &lt;code>Animator&lt;/code>, &lt;code>VRMBlendShapeProxy&lt;/code>, &lt;code>VRMFirstPerson&lt;/code>, &lt;code>VRMLookAtHead&lt;/code>, &lt;code>VRMLookAtBoneApplyer&lt;/code> are attached to the model:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_components.jpg" width="350" />
&lt;hr>
&lt;h2 id="open-vrm-prefab-in-the-scene">Open VRM prefab in the scene&lt;/h2>
&lt;p>Create a new scene by &lt;code>File&lt;/code> - &lt;code>New Scene&lt;/code> or use an existing one, then drag the prefab file to the Hierarchy window:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/alicia_scene2.png" />
&lt;hr>
&lt;h3 id="custom-settings-in-vrm">Custom settings in VRM&lt;/h3>
&lt;p>By clicking the prefab&amp;rsquo;s GameObject in &lt;code>Hierarchy&lt;/code>, the VRM model&amp;rsquo;s information will be displayed in the Inspector window. Note that &lt;strong>spring bone settings can be found in the GameObject named &amp;ldquo;secondary&amp;rdquo;&lt;/strong>. Also, in &lt;code>VRM Meta&lt;/code>, make sure &lt;a href="https://vrm.dev/en/docs/univrm/meta/univrm_meta/">title, author, license (the most important one)&lt;/a> are set.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;hr>
&lt;p>To make a VRM model fully functional, please set up the following components:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/blendshape/univrm_blendshape/">Expression and lip-sync (BlendShape)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/firstperson/univrm_firstperson/">First-person settings (Exclude model&amp;rsquo;s head in first-person view for VR applications)&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/lookat/univrm_lookat/">Eye gaze movements controlled by bone or BlendShape&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vrm.dev/en/docs/univrm/springbone/univrm_secondary/">Spring bone (SpringBone/SpringBoneCollider)&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="export-vrm-model-again">Export VRM model again&lt;/h3>
&lt;p>After the all settings are completed, select the the model (topmost parent GameObject) in &lt;code>Hierarchy&lt;/code> and again export the model from &lt;code>VRM0 -&amp;gt; Export UniVRM-0.XX&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/vrm_menu.jpg" alt="vrm_menu" width="250" />
&lt;br>&lt;/p>
&lt;p>Previous versions: &lt;code>VRM -&amp;gt; UniVRM-0.XX -&amp;gt; Export humanoid&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/UniVRMExportHumanoid.jpg" alt="UniVRMExportHumanoid" width="400" />
&lt;br>&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Pose Freeze&lt;/h4>
&lt;code>Pose Freeze&lt;/code> is for model normalization during export. The exporter will automatically check whether the export target needs to be normalized.
For instance, in Hierarchy if a mesh&amp;rsquo;s rotation or scale is not Default (first VRM export or adding accessories to the VRM model), the model normalization needs to be performed.
&lt;/div>
&lt;p>Other settings such as &lt;a href="https://vrm.dev/en/docs/univrm/blendshape/univrm_bake_blendshape/">Bake BlendShape State&lt;/a> is also available.&lt;/p>
&lt;h3 id="done">Done！&lt;/h3>
&lt;p>Your VRM file is good to go. Try to import the VRM file into &lt;a href="https://vrm.dev/en/vrm_applications/">applications&lt;/a> that support VRM!&lt;/p></description></item><item><title>Docs: LookAt(Blendshape)</title><link>https://vrm.dev/en/docs/univrm/lookat/lookat_blendshape/</link><pubDate>Thu, 06 Aug 2020 11:21:06 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/lookat/lookat_blendshape/</guid><description>
&lt;p>&lt;code>LookAt Blendshape&lt;/code> requires &lt;code>VRMLookAtHead&lt;/code> and &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> components.
In the default setting, please remove &lt;code>VRMLookAtBoneApplyer&lt;/code> and add &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> in the VRM model’s Inspector window.&lt;/p>
&lt;p>&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; VRMLookAtBlendShapeApplyer&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/add_vrm_lookat_blendshape.jpg" alt="image">&lt;/p>
&lt;h2 id="control-the-eye-gaze-with-blendshape-vrmlookatblendshapeapplyer">Control the Eye Gaze with BlendShape: VRMLookAtBlendShapeApplyer&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_applyer.png" alt="image">&lt;/p>
&lt;p>Please set up the following blendshapes:&lt;/p>
&lt;ul>
&lt;li>&lt;code>LookUp&lt;/code>&lt;/li>
&lt;li>&lt;code>LookDown&lt;/code>&lt;/li>
&lt;li>&lt;code>LookLeft&lt;/code>&lt;/li>
&lt;li>&lt;code>LookRight&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>In the default setting, when the look angle between the target and the model&amp;rsquo;s head reaches 90 degrees, the BlendShape value is set to 1. Any angle greater than 90 degrees will clamp the BlendShape value to 1. If &lt;code>Curve X Range Degree&lt;/code> is set to a lower degree, the pupil will move widely even at a small angle change.&lt;/p>
&lt;ul>
&lt;li>yaw, pitch maximum angle =&amp;gt; &lt;code>Curve X Range Degree&lt;/code>&lt;/li>
&lt;li>yaw, pitch angle range is mapped to BlendShape [0, 1]. Please set &lt;code>Curve Y Range Degree&lt;/code> to 1&lt;/li>
&lt;/ul>
&lt;p>Please set up &lt;code>VerticalDown&lt;/code>, &lt;code>VerticalUp&lt;/code> and &lt;code>Horizontal&lt;/code>.&lt;/p></description></item><item><title>Docs: Animation</title><link>https://vrm.dev/en/docs/gltf/animation_exporter/</link><pubDate>Mon, 03 Aug 2020 16:07:54 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/animation_exporter/</guid><description>
&lt;p>The definition for Animation is available in GLTF.&lt;/p>
&lt;blockquote>
&lt;p>VRM specification does not include the Animation.&lt;/p>
&lt;/blockquote>
&lt;h3 id="version">Version&lt;/h3>
&lt;ul>
&lt;li>v0.44&lt;/li>
&lt;/ul>
&lt;h3 id="support-status">Support Status&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="left">KeyName&lt;/th>
&lt;th align="center">&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="left">TranslationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">RotationKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">ScaleKey&lt;/td>
&lt;td align="center">○&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td align="left">BlendShapeKey&lt;/td>
&lt;td align="center">×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;hr>
&lt;h3 id="how-to-export-an-animator">How to Export an Animator&lt;/h3>
&lt;ol>
&lt;li>Add an Animator component to a root GameObject&lt;/li>
&lt;li>Create an AnimatorController and set it in the Controller box (&lt;code>Animator&lt;/code>-&amp;gt;&lt;code>Controller&lt;/code>) in the Inspector window&lt;/li>
&lt;li>From the UnityEditor&amp;rsquo;s toolbar, select &lt;code>Windows&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code> to open the Animation window&lt;/li>
&lt;li>Make sure the root GameObject is selected and click the Create button in the center of the Animation window for creating AnimationClip&lt;/li>
&lt;li>Add animation keys to this clip&lt;/li>
&lt;li>Export as the glb file from &lt;code>UniGLTF&lt;/code>-&amp;gt;&lt;code>Export&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="how-to-export-an-animation">How to Export an Animation&lt;/h3>
&lt;ol>
&lt;li>Add an Animation component to a root GameObject&lt;/li>
&lt;li>From the UnityEditor&amp;rsquo;s toolbar, select &lt;code>Windows&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code> to open the Animation window&lt;/li>
&lt;li>Make sure the root GameObject is selected and click the Create button in the center of the Animation window for creating AnimationClip&lt;/li>
&lt;li>Now select the created AnimationClip (the Project window) and switch to Debug mode (the Inspector window), and then turn on &lt;code>Legacy&lt;/code>&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/LegacyClip.png" alt="Interpolation">&lt;/p>
&lt;ol start="5">
&lt;li>Set the created AnimationClip in the Animation box (&lt;code>Animation&lt;/code>-&amp;gt;&lt;code>Animation&lt;/code>) in the Inspector window&lt;/li>
&lt;li>Add animation keys to this clip&lt;/li>
&lt;li>Export as the glb file from &lt;code>UniGLTF&lt;/code>-&amp;gt;&lt;code>Export&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="notes">Notes&lt;/h3>
&lt;ol>
&lt;li>Please set the Interpolation of RotationKey to either Quaternion or Euler Angles (Quaternion)
&lt;img src="https://vrm.dev/images/wiki/Interpolation.png" alt="Interpolation">&lt;/li>
&lt;li>For the Animator, all edited clips can be exported. However, the Animator states are not saved&lt;/li>
&lt;li>Though a created Animator goes through multiple animations (Animation State Machine), the UniGLTF Importer (UniGLTF-1.25) will only import the first one&lt;/li>
&lt;/ol></description></item><item><title>Docs: Bake BlendShape State When Exporting</title><link>https://vrm.dev/en/docs/univrm/blendshape/univrm_bake_blendshape/</link><pubDate>Mon, 27 Jul 2020 19:28:41 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/blendshape/univrm_bake_blendshape/</guid><description>
&lt;p>When exporting the VRM model, current BlendShape value can be set to the basic state.
For example, in &lt;code>SkinnedMeshRenderer&lt;/code>, click on &lt;code>BlendShapes&lt;/code> and adjust &lt;code>bs_face.eye_blink&lt;/code> slider to change the value from 0 to 57.8.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/blendshape_value.jpg" width="400" />
&lt;p>In export dialog, enabling &lt;code>Pose Freeze&lt;/code> is required.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/check_freeze.jpg" width="400" />
&lt;p>After VRM export:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/bake_blink.gif" />
&lt;p>Basic state (BlendShape value = 0) is changed (eyes are not open fully).&lt;/p></description></item><item><title>Docs: Install UniVRM with UPM</title><link>https://vrm.dev/en/docs/univrm/install/univrm_upm/</link><pubDate>Tue, 07 Jul 2020 18:33:59 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/install/univrm_upm/</guid><description>
&lt;p>Starting with UniVRM-0.56, UniVRM can be installed with Unity Package Manager.&lt;/p>
&lt;p>Installation prerequisites:&lt;/p>
&lt;ul>
&lt;li>&lt;code>Unity 2019.4 or later version&lt;/code>&lt;/li>
&lt;li>&lt;a href="https://git-scm.com/">Git client&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="install-git-for-unity">Install git for Unity&lt;/h2>
&lt;p>Please refer to &lt;a href="https://docs.unity3d.com/Manual/upm-git.html#req">&lt;code>Git dependencies -&amp;gt; Requirements&lt;/code>&lt;/a> for more information.&lt;/p>
&lt;blockquote>
&lt;p>To use Git dependencies in a project, make sure the &lt;a href="https://git-scm.com/">Git client&lt;/a> is installed on your machine and that you have added the Git executable path to the PATH system environment variable.&lt;/p>
&lt;/blockquote>
&lt;p>If git is not installed, the error messages like below will be shown:&lt;/p>
&lt;blockquote>
&lt;p>An error occurred while resolving packages:
Project has invalid dependencies:
com.vrmc.vrmshaders: No &amp;lsquo;git&amp;rsquo; executable was found. Please install Git on your system then restart Unity and Unity Hub&lt;/p>
&lt;/blockquote>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Check whether git.exe can be found on your machine&lt;/h4>
&lt;p>As mentioned above, install &lt;a href="https://git-scm.com/">Git client&lt;/a> and get the directory of git.exe (by default, git.exe is in &lt;code>C:\Program Files\Git\cmd&lt;/code>). Then, add it to the PATH system environment variable.&lt;/p>
&lt;p>To check the git version, for instance, open Windows PowerShell and type the command &lt;code>git --version&lt;/code>:&lt;/p>
&lt;pre>&lt;code class="language-dos" data-lang="dos">&amp;gt; git --version
git version 2.29.2.windows.2
&lt;/code>&lt;/pre>
&lt;/div>
&lt;h3 id="install-using-unitypackagemanager-window">Install using UnityPackageManager window&lt;/h3>
&lt;p>To open UPM, go to &lt;code>Windows&lt;/code> -&amp;gt; &lt;code>Package Manager&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/menu_packagemanager.jpg" />
&lt;hr>
&lt;p>Select &lt;code>add package from git URL&lt;/code> to import the target package specified by its git url.&lt;/p>
&lt;img src="https://vrm.dev/images/vrm10/from_git.jpg" />
&lt;hr>
&lt;p>Whenever a new UniVRM version comes out, we will post git urls associated with this release.&lt;/p>
&lt;p>For example, the git urls of &lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.66.0">v0.66.0&lt;/a> are:&lt;/p>
&lt;ul>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.66.0&lt;/code>&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.66.0&lt;/code> =&amp;gt; depends on VRMShaders&lt;/li>
&lt;li>&lt;code>https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.66.0&lt;/code> =&amp;gt; depends on UniGLTF, VRMShaders&lt;/li>
&lt;/ul>
&lt;p>Since there is no function that can automatically download the dependencies between packages, please add above git urls in order.&lt;/p>
&lt;p>Now check your project window. The packages above should be in the Packages folder:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/upm_package.jpg" />
&lt;hr>
&lt;p>By changing the version number, you can switch to different version based on your needs.&lt;/p>
&lt;h4 id="add-dependencies-in-packagesmanifestjson">Add dependencies in Packages/manifest.json&lt;/h4>
&lt;p>An alternative way is to add necessary dependencies right in Packages/manifest.json.
Open manifest.json with text/code editor and paste the following contents (example of &lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.66.0">v0.66.0&lt;/a>):&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#v0.66.0&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#v0.66.0&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#v0.66.0&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="specify-git-commit">Specify git commit&lt;/h2>
&lt;p>However, if you want to switch to the specific commit, you can manually change the hash value or append the specific commit in &lt;code>dependencies&lt;/code>.&lt;/p>
&lt;p>Example:&lt;/p>
&lt;div class="highlight">&lt;pre style="background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#309;font-weight:bold">&amp;#34;dependencies&amp;#34;&lt;/span>: {
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.vrmshaders&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRMShaders#39d54ce7d3b0061d2d9ee236017dca129c7cdc51&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.unigltf&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/UniGLTF#39d54ce7d3b0061d2d9ee236017dca129c7cdc51&amp;#34;&lt;/span>,
&lt;span style="color:#309;font-weight:bold">&amp;#34;com.vrmc.univrm&amp;#34;&lt;/span>: &lt;span style="color:#c30">&amp;#34;https://github.com/vrm-c/UniVRM.git?path=/Assets/VRM#39d54ce7d3b0061d2d9ee236017dca129c7cdc51&amp;#34;&lt;/span>,
&lt;span style="color:#a00;background-color:#faa">//&lt;/span> &lt;span style="color:#a00;background-color:#faa">...&lt;/span>
}
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Docs: MToon</title><link>https://vrm.dev/en/docs/univrm/shaders/shader_mtoon/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/shaders/shader_mtoon/</guid><description>
&lt;p>&lt;a href="https://www.slideshare.net/VirtualCast/vrm-mtoon">How to use MToon&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=EpCv23bnkAk">Introduction video&lt;/a> of MToon and other VRMShaders.&lt;/p>
&lt;h1 id="about-mtoon">About MToon&lt;/h1>
&lt;p>MToon aims for making Japanese anime expressions. It is achieved by mixing &lt;code>Lit Color&lt;/code> and &lt;code>Shade Color&lt;/code> based on Lighting parameters and light source environment.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_about.png" alt="alicia MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Apply MToon to the 3D model&lt;code>Alicia&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="quick-setup">Quick Setup&lt;/h1>
&lt;h2 id="basic-walk-through">Basic Walk Through&lt;/h2>
&lt;ul>
&lt;li>Select the target material and change the shader to &lt;code>VRM/MToon&lt;/code>&lt;/li>
&lt;li>Click the shader panel and set the same texture in &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> and &lt;code>Color-&amp;gt;Shade Color&lt;/code>&lt;/li>
&lt;li>Set white color in &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code> and set the preference shade color in &lt;code>Color-&amp;gt;Shade Color&lt;/code>&lt;/li>
&lt;li>Set the preference value in &lt;code>Shading-&amp;gt;Toony&lt;/code>. Make the lit color and shade color sharp:&lt;code>1&lt;/code>&lt;/li>
&lt;li>Set the texture in &lt;code>Rim-&amp;gt;Additive&lt;/code> (equivalent to &lt;code>sphere map&lt;/code> or &lt;code>Matcap&lt;/code>)&lt;/li>
&lt;li>If outline is necessary, select &lt;code>WorldCoordinates&lt;/code> in &lt;code>Outline-&amp;gt;Width-&amp;gt;Mode&lt;/code>. Select &lt;code>None&lt;/code> if outline is not needed&lt;/li>
&lt;li>Set the value with good appearance in &lt;code>Outline-&amp;gt;Width-&amp;gt;Width&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="general-material">General Material&lt;/h2>
&lt;ul>
&lt;li>Choose &lt;code>Shading Shift&lt;/code> and set &lt;code>0&lt;/code>&lt;/li>
&lt;li>Choose &lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> and set &lt;code>1&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="set-materials-not-being-shadowed-too-much-such-as-the-characters-face">Set materials not being shadowed too much such as the character&amp;rsquo;s face&lt;/h2>
&lt;ul>
&lt;li>Choose &lt;code>Shading Shift&lt;/code> and set a negative value&lt;/li>
&lt;li>Choose &lt;code>Shading Toony-&amp;gt;Shadow Receive Multiplier&lt;/code> and set &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;h1 id="items-setup">Items Setup&lt;/h1>
&lt;h2 id="preliminary">Preliminary&lt;/h2>
&lt;p>Select the target material and change the shader to VRM/MToon.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_mtoon.png" alt="select MToon" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Change the material shader to VRM/MToon&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="rendering">Rendering&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/mtoon_inspector_rendering.png" alt="MToon Rendering" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The items included in the Rendering Inspector&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Set the rendering type and cull mode in &lt;code>Rendering&lt;/code>.&lt;/p>
&lt;h3 id="rendering-type">Rendering Type&lt;/h3>
&lt;p>Set whether the material is opaque or semi-transparent.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Opaque&lt;/p>
&lt;ul>
&lt;li>For rendering performance, it is recommended to set &lt;code>Opaque&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Cutout&lt;/p>
&lt;ul>
&lt;li>Although it is opaque, it refers to the alpha value in &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code>. Therefore, it skips rendering for places having smaller value than &lt;code>Color-&amp;gt;Alpha-&amp;gt;Cutoff&lt;/code>.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>Transparent&lt;/p>
&lt;ul>
&lt;li>The opacity based on the alpha value in &lt;code>Color-&amp;gt;Lit Color, Alpha&lt;/code>.&lt;/li>
&lt;li>The downside is that outline rendering cannot be performed correctly.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="cull-mode">Cull Mode&lt;/h3>
&lt;p>Set which side of the polygon to be rendered.&lt;/p>
&lt;ul>
&lt;li>Back
&lt;ul>
&lt;li>Render the front side. Generally selecting &amp;ldquo;Back&amp;rdquo; is recommended.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Front
&lt;ul>
&lt;li>Render the back side.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>None
&lt;ul>
&lt;li>Render the both sides.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="alpha">Alpha&lt;/h3>
&lt;p>Required if choosing &lt;code>Rendering Type-&amp;gt;Cutout&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>Cutoff (&lt;code>Color-&amp;gt;Alpha&lt;/code>)
&lt;ul>
&lt;li>Set the threshold value for not rendering.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="color">Color&lt;/h2>
&lt;p>Set the rendering color.
The texture and color are multiplied.
Set the color hit by the light ray in &lt;code>Lit Color, Alpha&lt;/code> and set the color not hit by the light ray in &lt;code>Shade Color&lt;/code>.&lt;br>
Also, set the the alpha value in &lt;code>Lit Color, Alpha&lt;/code> for opacity information.&lt;/p>
&lt;h2 id="lighting">Lighting&lt;/h2>
&lt;h3 id="shading-shift">Shading Shift&lt;/h3>
&lt;p>Adjust the threshold value of the lit color and shade color for how the light ray hits the object.
When the value is &lt;code>0&lt;/code>, it is the normal lighting.
When the value is negative, it becomes the lighting with anime-like, wide range of lit color.
It is necessary to disable the self-shadow with setting the value to &lt;code>0&lt;/code> in &lt;code>Shadow Receive Multiplier&lt;/code> according to the displayed warning message.&lt;/p>
&lt;h3 id="shading-toony">Shading Toony&lt;/h3>
&lt;p>Set whether to smoothly change the lit color and shade color around the threshold value in &lt;code>Shade Shift&lt;/code>.
When the value is &lt;code>0&lt;/code>, it becomes realistically smooth like a general Lambert model.
When the value is &lt;code>1&lt;/code>, it becomes animation-style lighting. The lit color and shade color change rapidly around the threshold value.&lt;/p>
&lt;h3 id="shadow-receive-multiplier">Shadow Receive Multiplier&lt;/h3>
&lt;p>Set the influence of the self-shadow and shadow.
&lt;code>0&lt;/code>: Not affected.
&lt;code>1&lt;/code>: Affected.&lt;/p>
&lt;h3 id="lightcolor-attenuation">LightColor Attenuation&lt;/h3>
&lt;p>Set the influence of the light source color.
&lt;code>0&lt;/code>: Affected by the light source color.
&lt;code>1&lt;/code>: Not affected by the light source color. It only reflects the luminance of the light source color.&lt;/p>
&lt;h3 id="rim-additive">Rim Additive&lt;/h3>
&lt;p>Display additional light sources based on the relationship between the camera and the normal.
In general it is called sphere map or matcap.&lt;/p>
&lt;h3 id="emission">Emission&lt;/h3>
&lt;p>Set the constant color regardless of the light source environment.&lt;/p>
&lt;h3 id="normal-map">Normal Map&lt;/h3>
&lt;p>Set the normal map.
Set the strength value in the box on the right.&lt;/p>
&lt;h2 id="outline">Outline&lt;/h2>
&lt;p>Set the outline.&lt;/p>
&lt;h3 id="width-mode">Width Mode&lt;/h3>
&lt;ul>
&lt;li>None
&lt;ul>
&lt;li>The outline is not rendered&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>WorldCoordinates
&lt;ul>
&lt;li>Render the outline of the constant width for the world coordinate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ScreenCoordinates
&lt;ul>
&lt;li>Render the outline of the constant width for the screen coordinate&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="width">Width&lt;/h3>
&lt;p>Set the width of the outline.
The unit of distance is meter when &lt;code>Width Mode-&amp;gt;WorldCoordinates&lt;/code> is chosen.&lt;/p>
&lt;h3 id="color-mode">Color Mode&lt;/h3>
&lt;ul>
&lt;li>FixedColor
&lt;ul>
&lt;li>Render with the fixed color&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MixedLighting
&lt;ul>
&lt;li>Multiply the influence of Lighting&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="color-1">Color&lt;/h3>
&lt;p>Set the outline color.&lt;/p>
&lt;h3 id="color-lighting-mix">Color Lighting Mix&lt;/h3>
&lt;p>Set the multiplier coefficient when &lt;code>Color Mode-&amp;gt;MixedLighting&lt;/code> is chosen.&lt;/p></description></item><item><title>Docs: VRMFirstPerson</title><link>https://vrm.dev/en/docs/univrm/firstperson/univrm_firstperson/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/firstperson/univrm_firstperson/</guid><description>
&lt;p>VRM FirstPerson has two types of setting:&lt;/p>
&lt;ul>
&lt;li>VR headset position&lt;/li>
&lt;li>The visibility setting of a mesh from a camera in VR&lt;/li>
&lt;/ul>
&lt;p>※ These settings only work on VRM application side&lt;/p>
&lt;h2 id="headset-position">Headset Position&lt;/h2>
&lt;p>You can adjust how the movement of the headset is reflected on the model&amp;rsquo;s head by the followings:&lt;/p>
&lt;h3 id="firstpersonbone">FirstPersonBone&lt;/h3>
&lt;p>FirstPersonBone keeps track of a VR headset in the first-person view.
Normally the Head bone is assigned as FirstPersonBone.&lt;/p>
&lt;h3 id="firstpersonoffset">FirstPersonOffset&lt;/h3>
&lt;p>The offset from the FirstPersonBone position to the tracking position. [0, 0.06, 0] is the default offset from the head to the middle of the eyes.&lt;/p>
&lt;h2 id="vr-visibility-setting">VR Visibility Setting&lt;/h2>
&lt;p>The visibility setting is for VR applications.
For a VR application, two types of camera, First-person camera and Third-person camera, are expected to be used.&lt;/p>
&lt;ul>
&lt;li>First-person camera (Head-mounted display)&lt;/li>
&lt;li>Third-person camera (Other users&amp;rsquo; HMD, mirror, etc. For streaming)&lt;/li>
&lt;/ul>
&lt;p>However, for first-person camera, the user may encounter the following situations:&lt;/p>
&lt;ul>
&lt;li>Model&amp;rsquo;s head gets cut by the near plane&lt;/li>
&lt;li>The view is blocked by the Model&amp;rsquo;s hair&lt;/li>
&lt;li>The inside of the model&amp;rsquo;s head can be seen such as teeth&lt;/li>
&lt;/ul>
&lt;p>To address the above issues, you can set up the visibility of each mesh for First-person camera and Third-person camera:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Setting&lt;/th>
&lt;th>First-Person Camera&lt;/th>
&lt;th>Third-Person Camera&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Both&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>The part with a certain distance from the head (e.g. body, hands and feet)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>FirstPersonOnly&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ThirdPersonOnly&lt;/td>
&lt;td>&lt;/td>
&lt;td>〇&lt;/td>
&lt;td>Only visible from the external camera (e.g. head, hair, hat)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Auto&lt;/td>
&lt;td>Described below&lt;/td>
&lt;td>Described below&lt;/td>
&lt;td>Default&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="reset-visibility-setting">Reset Visibility Setting&lt;/h3>
&lt;p>The default setting for Mesh Renderer in VRMFirstPerson is &lt;code>Auto&lt;/code>.
If you increase/decrease the number of meshes (i.e. change the model&amp;rsquo;s structure), the reference to the original mesh may become &lt;code>Missing&lt;/code>, resulting in VRM Export failure.
We can fix the missing problem by resetting VRMFirstPerson.
Click the &lt;code>gear icon ⚙&lt;/code> on the upper right corner of &lt;code>VRM First Person(Script)&lt;/code> inspector and select &lt;code>Reset&lt;/code> shown as follow:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/firstperson_reset.gif" alt="firstperson reset" width="600" />
&lt;h3 id="use-auto-to-split-mesh-into-both-and-thirdpersononly">Use Auto to split Mesh into Both and ThirdPersonOnly&lt;/h3>
&lt;p>If &lt;code>Auto&lt;/code> is specified, the mesh will be split into two parts (&lt;code>Both&lt;/code> and &lt;code>ThirdPersonOnly&lt;/code>) automatically during import.
In UniVRM, call &lt;a href="https://vrm-c.github.io/UniVRM/en/vrm0/firstperson.html#setuplayermask">VRMFirstPerson.Setup()&lt;/a> for auto splitting.&lt;/p>
&lt;h4 id="meshannotationauto-algorithm">MeshAnnotation.Auto Algorithm&lt;/h4>
&lt;ul>
&lt;li>For a mesh specified as &lt;code>Auto&lt;/code>, each vertex will be checked whether it contains the weight of Head bone (or the child of the Head bone)&lt;/li>
&lt;li>Split the mesh into two groups: the first group contains triangles with HeadBone-related vertices while the second group contains triangles with the rest of the vertices&lt;/li>
&lt;li>Set the mesh containing the HeadBone-related vertices as &lt;code>ThirdPersonOnly&lt;/code>. And another mesh is set as &lt;code>Both&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>Note that auto splitting is a heavy processing.&lt;/p>
&lt;h3 id="recommended-structure">Recommended Structure&lt;/h3>
&lt;p>Split the model into &lt;code>Head&lt;/code> and &lt;code>Body&lt;/code>.&lt;/p>
&lt;ul>
&lt;li>Specify &lt;code>ThirdPersonOnly&lt;/code> for &lt;code>Head&lt;/code>&lt;/li>
&lt;li>Specify &lt;code>Both&lt;/code> for &lt;code>Body&lt;/code>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/firstperson.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Alicia&amp;rsquo;s &lt;code>Body&lt;/code> is set as &lt;code>Both&lt;/code>, while the parts related to &lt;code>Head&lt;/code> are set as &lt;code>ThirdPersonOnly&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/firstperson_runtime.png" alt="firstperson" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>The meshes with &lt;code>ThirdPersonOnly&lt;/code> setting are not rendered in FirstPerson.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>Docs: Check BlandShape Normal</title><link>https://vrm.dev/en/docs/univrm/blendshape/check_blendshape_normal/</link><pubDate>Mon, 16 Nov 2020 11:21:12 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/blendshape/check_blendshape_normal/</guid><description>
&lt;p>Since Unity 2018, when importing fbx into Unity, the BlendShape normal is automatically recalculated. As a result, there is a possibility that artifacts are produced on the model&amp;rsquo;s surface.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Details&lt;/h4>
If the BlendShape normal is (0, 0, 0), the value of the surface normal should not be changed. It seems that the original BlendShape normal is replaced by the recalculated BlendShape normal, resulting in unexpected changes on the model&amp;rsquo;s surface
&lt;/div>
&lt;h2 id="validate-surface-normal-using-mtoons-debugging-options">Validate surface normal using MToon&amp;rsquo;s debugging options&lt;/h2>
&lt;p>Drag fbx to the Hierarchy window and select it. In the Inspector, click &lt;code>Select -&amp;gt; Materials -&amp;gt; Extract Materials&lt;/code> and choose a folder to save these materials.
Next, select all materials and change &lt;code>Shader&lt;/code> to &lt;code>VRM/MToon&lt;/code>.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Surface normal validation&lt;/h4>
At this point we set all the materials to MToon for surface normal validation only, so setting up textures&amp;rsquo; properties is not required.
&lt;/div>
&lt;p>To visualize the surface normal, go to &lt;code>Options - Debugging Options - Visualize&lt;/code> and select &lt;code>Normal&lt;/code>:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/mtoon_normal.gif" alt="debug normal">&lt;/p>
&lt;p>Select a GameObject containing &lt;code>SkinnedMeshRenderer&lt;/code> with BlendShape. Drag the slider while observing surface normals:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/broken_normal.jpg" alt="debug normal">&lt;/p>
&lt;p>We can see surface normals around nose tip and mouth are not correct.&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Steps to reproduce:&lt;/h4>
&lt;ul>
&lt;li>Import VRoid model into Blender&lt;/li>
&lt;li>Export vrm as fbx&lt;/li>
&lt;li>Import fbx into Unity&lt;/li>
&lt;/ul>
&lt;/div>
&lt;h2 id="fix-blendshape-normal">Fix BlendShape normal&lt;/h2>
&lt;p>To fix BlendShape normal, in the fbx&amp;rsquo;s inspector, click &lt;code>Select -&amp;gt; Model -&amp;gt; Legacy Blend Shape Normals&lt;/code> and check the box.&lt;/p>
&lt;p>Now confirm whether the BlendShape normal has been fixed:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/legacy_normal_fixed.jpg" alt="fixed normal">&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Compare with the previous results&lt;/h4>
Surface normals around the norse tip and mouth (e.g. tongue, lower lip) are totally different
&lt;/div></description></item><item><title>Docs: Check Your VRM in Play Mode</title><link>https://vrm.dev/en/how_to_make_vrm/vrm_behavior_confirmation/</link><pubDate>Tue, 25 Aug 2020 17:26:54 +0900</pubDate><guid>https://vrm.dev/en/how_to_make_vrm/vrm_behavior_confirmation/</guid><description>
&lt;p>In this section, we assume you have made a VRM model and want to test it in play mode.&lt;/p>
&lt;h3 id="check-models-eye-movements">Check Model&amp;rsquo;s Eye Movements&lt;/h3>
&lt;p>Set &lt;code>AnimationClip/AnimationController&lt;/code> and set &lt;a href="https://vrm.dev/en/docs/univrm/lookat/univrm_lookat/#target">viewing target&lt;/a> in&lt;code>VRMLookAtHead -&amp;gt; Target&lt;/code>(the head orientation towards the target). For example, you can create a cube as a target from &lt;code>GameObject -&amp;gt; 3D Object -&amp;gt; Cube&lt;/code>. Next, serach head component in&lt;code>VRMLookAtHead -&amp;gt; Head&lt;/code>. After the corresponding components are assigned, check the model&amp;rsquo;s motion in the scene. The model will track the target position in Play Mode. You can drag the object position to test whether the model&amp;rsquo;s eyes are constantly tracking the object. The model&amp;rsquo;s close-up face can be viewed in Inspector window.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/LookAtTarget.png" alt="LookAtTarget" width="900" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/TargetTracking.png" alt="TargetTracking" width="500" />
&lt;/p>
&lt;h3 id="check-models-expressions">Check Model&amp;rsquo;s Expressions&lt;/h3>
&lt;p>To test the model&amp;rsquo;s expressions, fairly simple test scripts &amp;ldquo;AIUEO&amp;rdquo; and &amp;ldquo;Blinker&amp;rdquo; are provided. After setting up &lt;a href="https://vrm.dev/en/docs/univrm/blendshape/univrm_blendshape/#vrmblendshapeproxy">BlendShape&lt;/a>, click &lt;code>Add Component&lt;/code> at the bottom of model&amp;rsquo;s Inspector window to add &amp;ldquo;AIUEO&amp;rdquo; script or drag the script directly to Inspector. After &amp;ldquo;AIUEO&amp;rdquo; is set, lip synchronization animation that &amp;ldquo;aa&amp;rdquo;, &amp;ldquo;ih&amp;rdquo;, &amp;ldquo;ou&amp;rdquo;, &amp;ldquo;E&amp;rdquo;, &amp;ldquo;oh&amp;rdquo; switches in turn can be created in the scene. Similarly, if &amp;ldquo;Blinker&amp;rdquo; is set, eye blink animation that plays periodically can be created. See &lt;a href="https://github.com/vrm-c/UniVRM/releases">runtime VRM loader sample&lt;/a> (download UniVRM-RuntimeLoaderSample-0.XX) for more details on how to use these scripts.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/BlendShapeProxy.png" alt="BlendShapeProxy" width="650" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Double click the&lt;code>BlendShapeAvatar&lt;/code> field to set up expressions for the 3D model&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/AddExpressionScripts.png" alt="AddExpressionScripts" width="650" />
&lt;br>
&lt;br>
&lt;img src="https://vrm.dev/images/vrm/InspectorFaceView.png" alt="InspectorFaceView" width="400" />
&lt;/p></description></item><item><title>Docs: LookAt(UV)</title><link>https://vrm.dev/en/docs/univrm/lookat/lookat_uv/</link><pubDate>Thu, 06 Aug 2020 11:25:27 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/lookat/lookat_uv/</guid><description>
&lt;p>&lt;code>LookAt UV&lt;/code> requires &lt;code>VRMLookAtHead&lt;/code> and &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> components.
In the default setting, please remove &lt;code>VRMLookAtBoneApplyer&lt;/code> and add &lt;code>VRMLookAtBlendShapeApplyer&lt;/code> in the VRM model’s Inspector window.&lt;/p>
&lt;p>&lt;code>Inspector -&amp;gt; Add Component -&amp;gt; VRMLookAtBlendShapeApplyer&lt;/code>.&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/vrm/add_vrm_lookat_blendshape.jpg" alt="image">&lt;/p>
&lt;h2 id="control-the-eye-gaze-with-the-textures-uv">Control the Eye Gaze with the Texture&amp;rsquo;s UV&lt;/h2>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/blendshape_applyer.png" alt="image">&lt;/p>
&lt;p>A method that can move the model&amp;rsquo;s eyes by sliding Texture up, down, left, or right.
&lt;code>Unity Chan&lt;/code> belongs to this type.&lt;/p>
&lt;h3 id="search-the-eye-material">Search the eye material&lt;/h3>
&lt;p>Please search the eye material in the Project window. The &lt;code>Tiling Offset&lt;/code> setting will be displayed in the Inspector window:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/material_tiling_offset.png" alt="image">&lt;/p>
&lt;p>The values should be &lt;code>1, 1, 0, 0&lt;/code> (if the values are different, the followings are for reference only).&lt;/p>
&lt;p>Now you can try to change the values of &lt;code>Offset&lt;/code> X and Y. X value is left or right movements for the eyes. Y value is for moving the eyes up and down.
Since we have found where the eye materials are, we set the X and Y values back to &lt;code>0&lt;/code> and proceed to the next step.&lt;/p>
&lt;h2 id="set-up-lookup-lookdown-lookleft-and-lookright">Set up LookUp, LookDown, LookLeft and LookRight&lt;/h2>
&lt;p>In the following example, we will set up the eye movement based on UV value for the material &lt;code>eye_L1&lt;/code> (see the above image). &lt;code>unlit/transparent cutout&lt;/code> is applied in the material.&lt;/p>
&lt;h3 id="lookleft-example">LookLeft example&lt;/h3>
&lt;p>Please select the &lt;code>LookLeft&lt;/code> asset in the Project window:&lt;/p>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/lookleft.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Click &lt;code>Material List&lt;/code>&lt;/li>
&lt;li>Click &lt;code>+&lt;/code>&lt;/li>
&lt;li>Select &lt;code>eye_L1&lt;/code> - &lt;code>_MainTex_ST&lt;/code>&lt;/li>
&lt;li>Set &lt;code>Tliling = 1, 1&lt;/code>, &lt;code>Offset = 0, 0&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/tiling_offset_1100.png" alt="image">&lt;/p>
&lt;ul>
&lt;li>Adjust Offset value in the LookLeft setting&lt;/li>
&lt;li>Repeat the same procedure for &lt;code>eye_R1&lt;/code>&lt;/li>
&lt;li>Adjust &lt;code>Offset&lt;/code> X for Left and Right and &lt;code>Offset&lt;/code> Y for Up and Down. For example, &lt;code>LookLeft Offset = -0.2, 0&lt;/code>, &lt;code>LookRight Offset = 0.2, 0&lt;/code>, &lt;code>LookUp Offset = 0, -0.2&lt;/code>, &lt;code>LookDown Offset = 0, 0.2&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://vrm.dev/images/wiki/look_left.png" alt="image">&lt;/p>
&lt;p>&lt;a href="http://unity-chan.com/">© UTJ/UCL&lt;/a>&lt;/p>
&lt;h3 id="degreemapping">DegreeMapping&lt;/h3>
&lt;p>In the default setting, when the look angle between the target and the model&amp;rsquo;s head reaches 90 degrees, the BlendShape value is set to 1. Any angle greater than 90 degrees will clamp the BlendShape value to 1. If &lt;code>Curve X Range Degree&lt;/code> is set to a lower degree, the pupil will move widely even at a small angle change.&lt;/p>
&lt;ul>
&lt;li>yaw, pitch maximum angle =&amp;gt; &lt;code>Curve X Range Degree&lt;/code>&lt;/li>
&lt;li>yaw, pitch angle range is mapped to BlendShape [0, 1]. Please set &lt;code>Curve Y Range Degree&lt;/code> to 1&lt;/li>
&lt;/ul>
&lt;p>Please set up &lt;code>VerticalDown&lt;/code>, &lt;code>VerticalUp&lt;/code> and &lt;code>Horizontal&lt;/code>.&lt;/p></description></item><item><title>Docs: Uninstall UniVRM</title><link>https://vrm.dev/en/docs/univrm/install/univrm_uninstall/</link><pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate><guid>https://vrm.dev/en/docs/univrm/install/univrm_uninstall/</guid><description>
&lt;p>Please delete the folders below:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>folder&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Assets/VRM&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/UniGLTF&lt;/td>
&lt;td>v0.63.0 and above&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/VRMShaders&lt;/td>
&lt;td>v0.56.0 and above&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/MeshUtility&lt;/td>
&lt;td>From v0.59.0 to v0.63.0&lt;/td>
&lt;td>UniVRM-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>folder&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Note&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Assets/VRM.Samples&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-samples-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Assets/StreamingAssets/VRM.Samples&lt;/td>
&lt;td>&lt;/td>
&lt;td>UniVRM-samples-0.XX.0.unitypackage&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>If you want to upgrade UniVRM to the latest version in a Unity project, it is recommended to delete all the folders mentioned above since the locations of files/folders may change between different versions.&lt;/p>
&lt;p>To remove packages installed by Unity Package Window, please click &lt;code>Remove&lt;/code> button at the lower right of the package interface in UPM window.&lt;/p></description></item><item><title>Docs: VRMSpringBone</title><link>https://vrm.dev/en/docs/univrm/springbone/univrm_secondary/</link><pubDate>Mon, 16 Apr 2018 16:30:00 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/springbone/univrm_secondary/</guid><description>
&lt;p>Instruction video on how to set up spring bones &lt;a href="https://www.youtube.com/watch?v=tpl_mqU8i7U">can be found here&lt;/a>.&lt;/p>
&lt;h1 id="nodes-attached-by-spring-bones">Nodes attached by spring bones&lt;/h1>
&lt;p>When VRM is imported, nodes attached by components related to spring bones can be found as described below:&lt;/p>
&lt;ul>
&lt;li>VRMSpringBone is attached to the node&lt;code>secondary&lt;/code>.&lt;/li>
&lt;li>VRMSpringBoneColliderGroup is attached to nodes exported last time.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/vrm_settings.png" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Please check&lt;code>secondary&lt;/code>in the Hierarchy window if you cannot find VRMSpringBone&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="vrmspringbone">VRMSpringBone&lt;/h1>
&lt;p>The setting for making objects swaying such as tail, hair, clothes and so on. Please set the target object&amp;rsquo;s parent Gameobject in&lt;code>Root Bones&lt;/code>. To do that, drag a target object (e.g.&lt;code>hair1_L&lt;/code>) from&lt;code>Hierarchy&lt;/code>to the&lt;code>Element X&lt;/code>field (or click the rightmost icon of&lt;code>Element X&lt;/code>then you can see a list of selectable components). Adjust&lt;code>Size&lt;/code>to change the number of&lt;code>Root Bones&lt;/code>you want to put in.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/VRMSpringBone.png" alt="lookat" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Example: Set the hair and ribbon in&lt;code>Root Bones&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>That&amp;rsquo;s it. Try to adjust&lt;code>Stiffness Force&lt;/code>,&lt;code>Gravity Power&lt;/code>, etc. The target objects will perform swaying movements.&lt;/p>
&lt;h1 id="option-vrmspringbonecollidergroup-collision-detection">[Option] VRMSpringBoneColliderGroup (Collision detection)&lt;/h1>
&lt;p>The collision detection mechanism can be added to prevent swaying objects from penetrating user-specified parts.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/collider.png" alt="collider" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Add the collision detection mechanism on the head (VRMSpringBoneColliderGroup)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>For example, hit&lt;code>Add Component&lt;/code>to attach VRMSpringBoneColliderGroup script to&lt;code>head&lt;/code>and drag&lt;code>head&lt;/code>to the&lt;code>Element 0&lt;/code>field in&lt;code>Collider Groups&lt;/code>. You can change its offset and radius value by double clicking the&lt;code>Element 0&lt;/code>field in&lt;code>Collider Groups&lt;/code>.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/set_collider.png" alt="set_collider" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Attach the VRMSpringBoneColliderGroup script to&lt;code>head&lt;/code>and set&lt;code>head&lt;/code>in&lt;code>Collider Groups&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;img src="https://vrm.dev/images/vrm/spring_gizmo.png" alt="gizmo" />
&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Gizmo at runtime (check&lt;code>Draw Gizmo&lt;/code>in the Inspector of VRMSpringBone)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="set-multiple-collision-detections-in-vrmspringbonecollidergroup">Set multiple collision detections in VRMSpringBoneColliderGroup&lt;/h2>
&lt;p>Though the default is only set for one collision detection (a sphere range from the target), users can change the setting to multiple detections (multiple sphere ranges from multiple targets) by adjusting the value of&lt;code>Size&lt;/code>and multiple targets can then be put into&lt;code>Element&lt;/code>fields.&lt;/p>
&lt;h1 id="vrmspringbone-set-before-was-gone">VRMSpringBone set before was gone&lt;/h1>
&lt;p>VRMSpringBone was attached to the node&lt;code>secondary&lt;/code>during import.&lt;/p>
&lt;p>&lt;a href="https://vrm.dev/en/docs/univrm/springbone/univrm_secondary/#nodes-attached-by-spring-bones">VRMSpringBone&lt;/a>&lt;/p></description></item><item><title>Docs: Mesh Utility</title><link>https://vrm.dev/en/docs/gltf/mesh_utility/</link><pubDate>Tue, 02 Mar 2021 12:22:00 +0900</pubDate><guid>https://vrm.dev/en/docs/gltf/mesh_utility/</guid><description>
&lt;h1 id="meshutility">MeshUtility&lt;/h1>
&lt;p>Mesh processing tool in Unity platform.&lt;br>
Current available functions: &lt;code>MeshSeparator&lt;/code>, &lt;code>MeshIntegrator&lt;/code>, &lt;code>StaticMeshIntegrator&lt;/code> and &lt;code>BoneMeshEraser&lt;/code>.&lt;/p>
&lt;h2 id="example-of-usage">Example of Usage&lt;/h2>
&lt;p>Here we show how to use &lt;code>MeshSeparator&lt;/code>. The usages for all the functions are roughly the same.&lt;br>
Suppose we want to split meshes contained BlendShape.
We first select the GameObject of a model:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp1.jpg" width="200" />
&lt;hr>
&lt;p>Or directly drag and drop the GameObject to the &lt;code>TargetObject&lt;/code> field as shown below.&lt;br>
At the top of Unity Editor, click &lt;code>UniGLTF&lt;/code> -&amp;gt; &lt;code>MeshUtility&lt;/code> -&amp;gt; &lt;code>MeshProcessing Wizard&lt;/code> to display Mesh Processing Window:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_en_exp2.jpg" width="800" />
&lt;hr>
&lt;p>Click &lt;code>Process&lt;/code> to generate the output (GameObject) and export it by &lt;code>VRM0&lt;/code> -&amp;gt; &lt;code>Export UniVRM-0.xx&lt;/code>:&lt;/p>
&lt;img src="https://vrm.dev/images/vrm/mesh_utility_exp3.jpg" width="300" />
&lt;hr>
&lt;p>The split meshes are also saved in the &lt;code>Assets&lt;/code> folder.&lt;br>
In this example, the model&amp;rsquo;s mesh are split into two parts: face and body:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th align="center">Face: with BlendShape&lt;/th>
&lt;th align="center">Body: without BlendShape&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_1.jpg" width="200" />
&lt;/td>
&lt;td align="center">&lt;img src="https://vrm.dev/images/vrm/mesh_sep_result_2.jpg" width="200" />
&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="meshseparator">MeshSeparator&lt;/h3>
&lt;p>Separate meshes contained BlendShape. The BlendShape size can be potentially reduced.&lt;/p>
&lt;h3 id="meshintegrator">MeshIntegrator&lt;/h3>
&lt;p>Integrate all the meshes of a (prefab) GameObject. Meshes w/ BlendShape will be grouped into another one.&lt;/p>
&lt;h3 id="staticmeshintegrator">StaticMeshIntegrator&lt;/h3>
&lt;p>Integrate all the static meshes of a (prefab) GameObject (Root and its children).&lt;/p>
&lt;h3 id="bonemesheraser">BoneMeshEraser&lt;/h3>
&lt;p>Eliminate meshes associated with the bones in EraseRoot hierarchy.&lt;/p></description></item><item><title>Docs: UniVRM Version</title><link>https://vrm.dev/en/docs/univrm/install/univrm_version/</link><pubDate>Mon, 01 Feb 2021 07:16:52 +0900</pubDate><guid>https://vrm.dev/en/docs/univrm/install/univrm_version/</guid><description>
&lt;h2 id="v0550-last-unity-56-compatible-version">v0.55.0 (Last Unity-5.6 compatible version)&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Date&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Bugs&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2019&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.55.0">0.55.0&lt;/a>&lt;/td>
&lt;td>◎ Stable Version&lt;/td>
&lt;td>The final version for supporting Unity-5.6&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="v0560-">v0.56.0 ~&lt;/h2>
&lt;ul>
&lt;li>If bugs are introduced after version bump, we will fix them as quick as we can and bump the minor version&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Date&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Bugs&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>2020&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.0">0.56.0&lt;/a>&lt;/td>
&lt;td>x&lt;/td>
&lt;td>The minimum version support for Unity is 2018.4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.1">0.56.1&lt;/a>&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.2">0.56.2&lt;/a>&lt;/td>
&lt;td>x&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.56.3">0.56.3&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.57.0">0.57.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Bones with the same names will be renamed automatically&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.57.1">0.57.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.58.0">0.58.0&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/td>
&lt;td>Remade export dialog&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.58.1">0.58.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.59.0">0.59.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Improved validation checks on VRMSpringBone settings&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.60.0">0.60.0&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Enhanced null-checks on VRM&amp;rsquo;s components when exporting&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.61.0">0.61.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/20?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>&lt;/td>
&lt;td>Made UniUnlit&amp;rsquo;s vertex color working properly. Fixed AOT compilation issue&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.61.1">0.61.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.62.0">0.62.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/21?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Fixed bugs when baking BlendShape&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2021 01/05&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.63.0">0.63.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/25?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup> &lt;sup id="fnref:5">&lt;a href="#fn:5" class="footnote-ref" role="doc-noteref">5&lt;/a>&lt;/sup>&lt;/td>
&lt;td>JPG export bug. Separated UniGLTF from UniVRM&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>01/07&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.63.1">0.63.1&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup> &lt;sup id="fnref:4">&lt;a href="#fn:4" class="footnote-ref" role="doc-noteref">4&lt;/a>&lt;/sup>&lt;/td>
&lt;td>JPG export bug&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>01/08&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.63.2">0.63.2&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>01/15&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.64.0">0.64.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/23?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:6">&lt;a href="#fn:6" class="footnote-ref" role="doc-noteref">6&lt;/a>&lt;/sup>&lt;/td>
&lt;td>Empty submesh will not be exported. vrm-1.0 Experiment kick-off&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>01/26&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.0">0.65.0&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>01/28&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.1">0.65.1&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/28?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:7">&lt;a href="#fn:7" class="footnote-ref" role="doc-noteref">7&lt;/a>&lt;/sup>&lt;/td>
&lt;td>Fixed export errors when Turkish locale is on &lt;a href="https://github.com/vrm-c/UniVRM/issues/696">#696&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>01/28&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.2">0.65.2&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/29?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.65.3">0.65.3&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Updated UniGLTF version number for UPM package. No unity package release&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>02/03&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.66.0">0.66.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/26?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>✅ Stable Version&lt;/td>
&lt;td>Added Warning messages when non-normalized Hierarchy contains spring bone colliders&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.67.0">0.67.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/27?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Maintenance release&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.67.1">0.67.1&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Only for UPM package. No unity package release&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="v0680--vrm-10-pre-release">v0.68.0 ~ (VRM-1.0 pre release)&lt;/h2>
&lt;p>Working on VRM-1.0&amp;hellip;&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://vrm-c.github.io/UniVRM/en/">API&lt;/a>&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Date&lt;/th>
&lt;th>Version&lt;/th>
&lt;th>Bugs&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.68.0">0.68.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/30?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:8">&lt;a href="#fn:8" class="footnote-ref" role="doc-noteref">8&lt;/a>&lt;/sup> &lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/td>
&lt;td>Added glb/gltf ReverseAxis settings. ImporterContext API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/16&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.68.1">0.68.1&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:9">&lt;a href="#fn:9" class="footnote-ref" role="doc-noteref">9&lt;/a>&lt;/sup>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/17&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.68.2">0.68.2&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/22&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.69.0">0.69.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/31?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup> &lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup> &lt;sup id="fnref:12">&lt;a href="#fn:12" class="footnote-ref" role="doc-noteref">12&lt;/a>&lt;/sup>&lt;/td>
&lt;td>Fixed SmoothTexture conversion &lt;a href="https://github.com/vrm-c/UniVRM/issues/388">#388&lt;/a>, support Unity2020&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/23&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.69.1">0.69.1&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup> &lt;sup id="fnref:11">&lt;a href="#fn:11" class="footnote-ref" role="doc-noteref">11&lt;/a>&lt;/sup>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>03/31&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.70.0">0.70.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/32?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;sup id="fnref:10">&lt;a href="#fn:10" class="footnote-ref" role="doc-noteref">10&lt;/a>&lt;/sup>&lt;/td>
&lt;td>impl &lt;code>WEIGHTS_0&lt;/code> not float4&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>04/05&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.71.0">0.71.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/33?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>IOS build&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>04/13&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.72.0">0.72.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/34?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>DivideVertexBuffer Option&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>04/22&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.73.0">0.73.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/35?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>* &lt;a href="https://github.com/vrm-c/UniVRM/pull/897">Fix/other permission url&lt;/a> * &lt;a href="https://github.com/vrm-c/UniVRM/pull/894">Fixed an issue where LookAtBlendShape cannot be exported after model normalization&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>05/12&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.74.0">0.74.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/36?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>* &lt;a href="https://github.com/vrm-c/UniVRM/issues/922">Fixed the behavior of the SpringBone scale after runtime import&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>05/25&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.75.0">0.75.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/37?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Fixed an issue where LookAtBone Applier mapping values were reset during the normalization process&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>06/08&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.76.0">0.76.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/38?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Fixed an issue where namespace MeshUtility conflicts with UnityEditor.MeshUtility&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>06/17&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.77.0">0.77.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/39?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://vrm.dev/en/docs/univrm/programming/univrm_api_history/">API Update&lt;/a>, &lt;a href="https://github.com/vrm-c/UniVRM/issues/1022">issue 1022&lt;/a>, &lt;a href="https://github.com/vrm-c/UniVRM/issues/496">issue 496&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>06/23&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/releases/tag/v0.78.0">0.78.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/40?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;a href="https://github.com/vrm-c/UniVRM/pull/1049">https://github.com/vrm-c/UniVRM/pull/1049&lt;/a>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="v0790-">v0.79.0 ~&lt;/h2>
&lt;ul>
&lt;li>From version &lt;code>0.80.0&lt;/code>, Minimum version of Unity is &lt;code>2019.4LTS&lt;/code>.&lt;a href="https://vrm.dev/en/docs/univrm/install/unity_version/">Unity Version&lt;/a>&lt;/li>
&lt;li>From version &lt;code>0.80.0&lt;/code>, Start &lt;code>VRM-1.0β&lt;/code> UnityPackage.&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>date&lt;/th>
&lt;th>version&lt;/th>
&lt;th>Bugs&lt;/th>
&lt;th>Notes&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>07/20&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.79.0">0.79.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/41?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>Changed &lt;code>Pre release&lt;/code> to &lt;code>Latest release&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>08/12&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.80.0">0.80.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/42?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>VRM-1.0β unitypackage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>08/20&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.81.0">0.81.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/43?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>3 packages(UniGLTF, VRM, VRM-1.0beta)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>09/01&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.82.0">0.82.0&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/44?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>glb editor import&lt;/td>
&lt;td>URP API&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>09/03&lt;/td>
&lt;td>&lt;a href="http://github.com/vrm-c/UniVRM/releases/tag/v0.82.1">0.82.1&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/milestone/45?closed=1">milestone&lt;/a>&lt;/td>
&lt;td>&lt;/td>
&lt;td>URP API&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>Fixed a bug where Renderers in VRMFirstPerson were replicated after VRM import &lt;a href="https://github.com/vrm-c/UniVRM/issues/515">/#515&lt;/a> &lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>Fixed bugs where SpringBone Collider transformation was done twice. &lt;a href="https://github.com/vrm-c/UniVRM/issues/576">#576&lt;/a> &lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>Bugs occurred when creating a screenshot as .jpg format. &lt;a href="https://github.com/vrm-c/UniVRM/issues/639">#639&lt;/a> &lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:4" role="doc-endnote">
&lt;p>Fixed serialization bugs when exporting VRM file. &lt;a href="https://github.com/vrm-c/UniVRM/issues/654">#654&lt;/a> &lt;a href="#fnref:4" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:5" role="doc-endnote">
&lt;p>Fixed MeshUtility&amp;rsquo;s reference issues. &lt;a href="#fnref:5" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:6" role="doc-endnote">
&lt;p>Fixed MeshUtility&amp;rsquo;s assembly definitions. &lt;a href="https://github.com/vrm-c/UniVRM/pull/687">#687&lt;/a> &lt;a href="#fnref:6" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:7" role="doc-endnote">
&lt;p>Fixed compile errors when building a program including UniVRM. &lt;a href="https://github.com/vrm-c/UniVRM/issues/701">#701&lt;/a> &lt;a href="#fnref:7" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:8" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/issues/786">#786&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/issues/788">#788&lt;/a> &lt;a href="#fnref:8" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:9" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/issues/790">#790&lt;/a> &lt;a href="https://github.com/vrm-c/UniVRM/issues/794">#794&lt;/a> &lt;a href="#fnref:9" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:10" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/issues/836">#836&lt;/a> &lt;a href="#fnref:10" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:11" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/pull/831">#831&lt;/a> &lt;a href="#fnref:11" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:12" role="doc-endnote">
&lt;p>&lt;a href="https://github.com/vrm-c/UniVRM/pull/812">#812&lt;/a> &lt;a href="#fnref:12" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item></channel></rss>